============================================================================================

	PICO-8 v0.2.0c
	https://www.pico-8.com
	(c) 2014-2020 Lexaloffle Games LLP 版权所有
	作者：Joseph White // hey@lexaloffle.com

	PICO-8 基于：
		SDL2 http://www.libsdl.org
		Lua 5.2 http://www.lua.org  // 参见 license.txt
		ws281x by jgarff            // 参见 license.txt
		GIFLIB http://giflib.sourceforge.net/
		WiringPi http://wiringpi.com/
		libb64 by Chris Venter

============================================================================================

欢迎使用 PICO-8！

	PICO-8 是一款可用于制作，共享和游玩小游戏以及其他计算机程序的虚构游戏机。
	当您启动它时，会显示一个可输入 Lua 程序的 Shell 并提供
	用于创建精灵（sprites），地图和声音的简单内置工具。

	PICO-8 精心设计的严格限制，是为了让开发者感觉使用它工作很有趣，鼓励小
	但富有表现力的设计，并希望为 PICO-8 卡带提供独特的外观和感觉。


:: 按键

	切换全屏：Alt + Enter
	退出：Alt + F4 或 Command-Q
	重新加载/运行/重新启动卡带：Ctrl + R
	快速保存：Ctrl + S
	静音/取消静音：Ctrl + M
	玩家 1 默认值：光标 + ZX / NM / CV
	玩家 2 默认值：SDFE + Tab，Q / Shift A
	Enter 或 P 呼出暂停菜单（运行时）
	// 使用 KEYCONFIG 更改默认值。


:: 参数

	显示：128x128，固定 16 种颜色
	输入：6 个按键
	卡带大小：32k
	声音：4 声道，64 个可定义的声音
	代码：Lua（最多 8192 个代码 token）
	精灵：一组 128 个 8x8 精灵（另外还有 128 个共享的）
	地图：128x32 个 8-bit 单元（另外还有 128x32 个共享的）


:: 你好，世界

	在启动 PICO-8 之后，尝试输入以下命令并按下回车：

		PRINT("HELLO WORLD")
		RECTFILL(80,80,120,100,12)
		CIRCFILL(70,90,20,14)
		FOR I=1,4 DO PRINT(I) END

	（注意：PICO-8 仅显示大写字符 -- 只需正常输入不需要启用大写键！）

	您可以通过在代码编辑模式中使用类似这样的命令
	以及两个特殊的回调函数 _UPDATE 和 _DRAW 来构建交互式程序。
	例如，以下程序允许您使用方向键使圆移动。
	按 Esc 键切换到代码编辑器，然后键入或复制并粘贴以下代码：

	X = 64  Y = 64
	FUNCTION _UPDATE()
	 IF (BTN(0)) THEN X=X-1 END
	 IF (BTN(1)) THEN X=X+1 END
	 IF (BTN(2)) THEN Y=Y-1 END
	 IF (BTN(3)) THEN Y=Y+1 END
	END

	FUNCTION _DRAW()
	 CLS(5)
	 CIRCFILL(X,Y,7,14)
	END

	现在按下 Esc 返回到控制台，然后键入 RUN（或按 CTRL-R）以查看其运行情况。
	请参阅 demo 卡带来查看更复杂的程序（键入 INSTALL_DEMOS）。

	如果要存储程序供以后使用，请使用 SAVE 命令：

	> SAVE PINKCIRC

	再次加载：

	> LOAD PINKCIRC


:: 示例卡带

	这些卡带包含在 PICO-8 中，可以通过键入以下内容进行安装：

	INSTALL_DEMOS
	CD DEMOS
	LS

	HELLO      Greetings from PICO-8
	API        Demonstrates most PICO-8 functions
	JELPI      Platform game demo w/ 2p support 
	CAST       2.5D Raycaster demo
	DRIPPY     Draw a drippy squiggle
	WANDER     Simple walking simulator
	COLLIDE    Example wall and actor collisions

	要运行卡带，请打开 PICO-8 并键入：

	LOAD JELPI
	RUN

	按 Esc 键停止程序，再按一次进入编辑模式。

	也可以通过以下方式安装少量来自于社区的卡带：INSTALL_GAMES



:: 文件系统

	这些命令可用于管理文件和目录（文件夹）：

	LS          列出当前目录
	CD BLAH     更改目录
	CD ..       上一个目录
	CD /        回到顶层目录（在 PICO-8 的虚拟驱动器上）
	MKDIR BLAH  创建目录
	FOLDER      在主机操作系统的文件浏览器中打开当前目录

	LOAD BLAH  从当前目录加载卡带
	SAVE BLAH  将卡带保存到当前目录

	如果要移动文件，复制或删除文件，
	请使用 FOLDER 命令并在主机操作系统中执行。

	PICO-8 的驱动器的默认位置是：

	Windows: C:/Users/Yourname/AppData/Roaming/pico-8/carts
	OSX: /Users/Yourname/Library/Application Support/pico-8/carts
	Linux: ~/.lexaloffle/pico-8/carts

	您可以在 pico-8/config.txt 中更改此设置和其他设置

	提示：可以将驱动器目录映射到云驱动器（由Dropbox，Google或类似服务）
	以创建在多个 PICO-8 计算机之间共享的单个磁盘。


:: 加载和保存

	当使用 LOAD 和 SAVE 时，.P8 扩展名可以省略（自动添加）。

	保存为. p8.png 扩展名将以一种特殊的图像格式保存卡带，使其看起来像卡带。

	使用文件名 "@CLIP" 加载或保存到剪贴板。

	卡带加载或保存后，也可以使用 CTRL-S 快速保存

	:: 保存带有文本标签和预览图像的 .p8.png 卡带

		要生成保存在卡带中的标签图像，请先运行该程序，然后按 CTRL-7 进行抓取
		屏幕上的所有内容。代码以“--”开头的前两行也会被绘制到卡带的标签。

		例如
		-- OCEAN DIVER LEGENDS
		-- BY LOOPY


	:: .png 格式的代码大小限制

		以 .png 格式保存时，代码的压缩大小必须小于 15360 字节。
		要查看代码的当前大小，请使用 INFO 命令。
		当以 .p8 格式保存时，代码的压缩大小并不强制限制。


:: 使用外部文本编辑器

	可以使用单独的文本编辑器直接编辑 .p8 文件。
	在以下情况，使用 CTRL-R 运行卡带将自动重新加载文件：

		1. PICO-8 编辑器中没有未保存的更改，并且
		2. 该文件的内容与上次加载的版本不同

	如果对磁盘上的卡带和编辑器中的卡带都进行了更改，则会显示一条通知：

		DIDN'T RELOAD; UNSAVED CHANGES

	PICO-8 不完全支持大写字符，在代码编辑器中查看时它们会自动转换为小写。
	请注意，这还会导致存在未保存的更改，
	这意味着 CTRL-R 将停止自动重新加载磁盘上的版本，
	直到它被手动 LOAD()。

	字形字符（以 shift-A..Z 键入）以 .p8 格式存储（unicode）。


:: 备份

	如果您退出而不保存更改或覆盖现有文件，
	则会有一份卡带备份保存到 {appdata}/pico-8/backup。
	也可以通过键入 BACKUP 保存当前卡带的额外副本到该文件夹中。


::配置

	:: config.txt

		您可以在 config.txt 中找到一些设置。可在 PICO-8 未运行时编辑文件。

		Windows: C:/Users/Yourname/AppData/Roaming/pico-8/config.txt
		OSX: /Users/Yourname/Library/Application Support/pico-8/config.txt
		Linux: ~/.lexaloffle/pico-8/config.txt

		使用 -home 开关（如下所示）来使用其他路径来存储 config.txt 以及其他数据。

		在运行 PICO-8 时，可以通过键入 CONFIG SETTING VALUE 来更改某些设置。
		（单独输入 CONFIG 查看可配置列表）


	:: 命令行参数

		// 注意：这些设置会覆盖 config.txt 中的配置

		pico-8 [switches] [filename.p8]

		-width n                 设置窗口宽度
		-height n                设置窗口高度
		-windowed n              将窗口模式设置为关闭（0）或打开（1）
		-volume n                设置音频音量 0..256
		-joystick n              游戏杆控制从玩家 n（0..7）开始
		-pixel_perfect n         1 表示以整数比例（默认情况下为开）进行未经过滤的屏幕拉伸
		-preblit_scale n         在 blitting 到屏幕之前按 n 缩放显示（与 -pixel_perfect 0 一起使用）
		-draw_rect x,y,w,h       绘制 pico-8 屏幕的绝对窗口坐标和大小
		-run filename            加载并运行卡带
		-x filename              执行 PICO-8 卡带（不绘制图形），然后退出（实验！）
		-export param_str        在非图形模式下运行 EXPORT 命令并退出（请参见 export 下的注释）
		-p param_str             将参数字符串传递到指定的卡带
		-splore                  启动 splore 模式
		-home path               设置存储 config.txt 以及其他用户数据文件的路径
		-root_path path          设置存储卡带的路径
		-desktop path            设置屏幕快照和 gif 的保存位置
		-screenshot_scale n      屏幕截图的比例。默认值：3（368x368 像素）
		-gif_scale n             gif 捕获的比例。默认值：2（256x256 像素）
		-gif_len n               以秒为单位设置最大 gif 长度（1..120）
		-gui_theme n             设置为 1 来启用更高对比度的编辑器配色方案
		-timeout n               下载超时之前要等待的秒数（默认值：30）
		-software_blit n         使用软件 blitting 模式关闭（0）或打开（1）
		-foreground_sleep_ms n   帧之间要休眠的毫秒数。
		-background_sleep_ms n   在后台运行时，帧之间要休眠多少毫秒
		-accept_future n         设置为 1 来使用将来版本的 PICO-8 载入卡带


:: 控制器设置

	PICO-8 使用 SDL2 控制器配置方案。它将在启动时检测通用控制器
	还会在同一目录的 sdl_controllers.txt 中查找自定义映射
	作为 config.txt。sdl_controllers.txt 每行代表一个映射。

	要为您的控制器生成自定义映射字符串，请使用 SDL2 附带的程序 controllermap，
	或尝试 http://www.generalarcade.com/gamepadtool/

	要找出 SDL2 检测到的控制器 ID，请搜索“joysticks”
	或在运行 PICO-8 后在 log.txt 中查看“Mapping”。
	此 ID 在不同的操作系统下可能会有所不同。参见：https://www.lexaloffle.com/bbs/?tid=32130

	要设置哪些键盘键触发操纵杆按钮的按下，请使用 KEYCONFIG。


:: 屏幕截图，视频和卡带标签

	在运行卡带时使用：

		CTRL-6 将屏幕快照保存到桌面
		CTRL-7 捕获卡带标签图像
		CTRL-8 开始录制视频
		CTRL-9 将 GIF 视频保存到桌面（默认情况下，最长 8 秒）

	您可以随时保存视频（始终在录制）-- 使用 CTRL-8 只是重置视频起点。

	要更改最大 gif 长度，请在 config.txt 中编辑 gif_len 以指定要记录的秒数。
	gif 格式不能完全匹配 30fps，因此 PICO-8 使用最接近的：33.3fps。



:: 共享卡带

	共有三种共享 PICO-8 制造的卡带的方式：

		1. 与其他 PICO-8 用户直接共享 .p8 或 .p8.png 文件

			键入 FOLDER 在主机操作系统中打开当前文件夹。

		2. 将卡带发布到 Lexaloffe BBS 上以获得可在网络上游玩的版本

			http://www.lexaloffle.com/pico-8.php?page=submit

		3. 将卡带导出到独立的 html/js 或本机二进制文件
			（有关详细信息，请参见导出部分）


:: 导出 / 导入

	EXPORT 命令可用于生成 png，wav 文件以及独立的 html 和本机二进制文件。
	输出格式是根据文件名扩展名推断出来的（例如 .png）。

	您可以根据需要自由分发和使用导出的卡带和数据，
	如果您已获得作者和贡献者的许可。

	:: 精灵表（.png）

		IMPORT BLAH.PNG     --  应当使用 128x128 png 和符合 pico-8 的颜色
		EXPORT BLAH.PNG     --  使用 folder() 定位导出的 png

	:: SFX 和音乐（.wav）

		EXPORT BLAH.WAV     --  从当前模板中导出音乐（当编辑器模式为 MUSIC 时）
		EXPORT BLAH.WAV     --  导出当前的 SFX（当编辑器模式为 SFX 时）
		EXPORT BLAH%D.WAV   --  将所有 SFX 导出为 blah0.wav，blah1.wav .. blah63.wav

	:: HTML 格式（.html）

		导出为独立的 html（foo.html，foo.js）：
		> EXPORT FOO.HTML

		或者只是 .js 文件：
		> EXPORT FOO.JS

		使用 -f 将文件写入名为 foo_html 的文件夹中，使用 index.html 而不是 foo.html
		> EXPORT -F FOO.HTML

		可以使用使用 -p 开关提供自定义 html 模板：
		> EXPORT FOO.HTML -P ONE_BUTTON

		这将使用文件 {application data}/pico-8/plates/one_button.html
		作为 html shell，用 .js 文件名替换特殊字符串 ##js_file##。

		使用 -w 导出为 .wasm + .js // 实验性的！压缩后可减少大约 100k
		> EXPORT -W FOO.HTML


	:: 二进制格式（.bin）

		要为 Windows，Linux（64 位），Mac 和 Raspberry Pi 生成独立的可执行文件，请执行以下操作：

		> EXPORT FOO.BIN

		默认情况下，卡带标签用作不透明的图标。
		要从精灵表中指定图标，请使用 -i 以及可选的 -s 以及 -c
		控制大小和透明度。

			-I N  图标索引 N，默认透明颜色为 0（黑色）。
			-S N  大小为 NxN 的精灵。大小 3 将产生一个 24x24 的图标。
			-C N  将颜色 N 视为透明。使用 16 表示不透明。

		例如，要使用从精灵表的索引 32 开始的大小为 2x2 的精灵，
		并将颜色 12 视为透明：

			> EXPORT -I 32 -S 2 -C 12 FOO.BIN

	:: 上传到 itch.io

		如果要将导出的卡带作为可游玩的 html 上传到 itch.io：

			1. 在 PICO-8 内部：EXPORT -F FOO.HTML
			2. 在 itch 仪表盘创建一个新项目。
			3. 压缩文件夹并上传（设置“This file will be played in the browser”）
			4. 嵌入页面，尺寸为 750px x 680px。
			5. 将“Mobile Friendly”设置为（默认方向），将“Automatically start on page load”设置为打开。
				// 不需要全屏按钮，因为默认的 PICO-8 模板有其自己的按钮。
			6. 将背景（BG2）设置为深色（例如 ＃232323），将文本设置为浅色（#cccccc）


:: 导出多个卡带

生成时，通过将多达16个盒带传递到EXPORT，可以将它们捆绑在一起。
独立的html或本机二进制播放器。

导出FOO.HTML DAT1.P8 DAT2.P8 GAME2.P8

在运行时，可以像访问本地文件一样访问额外的购物车：

RELOAD（0,0,0x2000，“ DAT1.P8”）-从DAT1.P8加载Spritesheet
LOAD（“ GAME2.P8”）-加载并运行另一个购物车


::从主机操作系统运行EXPORT

启动PICO-8时，请使用-export开关以无头模式运行导出器。
输出到当前目录，而不是PICO-8文件系统。

EXPORT命令的参数作为单个（小写）字符串传递：

pico8 foo.p8 -export“ -i 32 -s 2 -c 12 foo.bin dat0.p8 dat1.p8”


::出口墨盒的限制

导出的盒式磁带无法加载和运行BBS盒式磁带，例如通过LOAD（“＃FOO”）



:: Splore

SPLORE是一个内置实用程序，用于浏览和组织本地和bbs（在线）
墨盒。键入SPLORE [enter]以启动它，或使用-splore启动PICO-8。

可以通过操纵杆完全控制SPLORE：
向左和向右浏览墨盒列表
向上和向下选择每个列表中的项目
X，O或MENU启动墨盒

在推车内时，按MENU即可收藏弹药筒或退出以进行弹奏。
如果您使用的是键盘，也可以按F来收藏一个项目
在盒带列表视图中选择它时。

查看BBS购物车列表时，请使用顶部列表项重新下载以下列表：
墨盒。如果您处于离线状态，则会显示上次下载的列表，该列表是
仍然可以播放您下载的所有盒带。

如果您在无法访问互联网的计算机上安装了PICO-8，则还可以
使用INSTALL_GAMES向/ games添加少量预装的BBS手推车



:: PICO-8的怪癖

要注意的常见陷阱：

-Spritesheet的下半部分和地图的下半部分占用相同的内存。
//如果不确定如何使用，最好只使用其中一个。
-PICO-8数字最多只能达到32767.99999（0x7fff.ffff）
//如果您在每帧计数器上加1，它会在大约18分钟后溢出！
-Lua数组默认为1，而不是0。 FOREACH从TBL [1]开始，而不是TBL [0]。
-COS（）和SIN（）取0..1而不是0..PI * 2，并且SIN（）取反。
-SGN（0）返回1。
-切换全屏：在OSX上使用alt输入（命令F用于搜索文本）。
-当您要导出.png盒式磁带时，请使用“保存”而不是“导出”。导出将仅保存子画面！



================================================== =========================================
编辑器模式
================================================== =========================================

按Escape键可在控制台和编辑器之间切换
单击右上角的编辑模式选项卡进行切换或按ALT + LEFT / RIGHT


**警告：子画面的后半部分（第2和第3组），下半部分
的地图共享相同的墨盒空间。取决于您如何使用数据，但是
请注意，在子图形表的后半部分上绘图可能会破坏
地图，反之亦然。


::代码编辑器

按住Shift键选择（或用鼠标单击并拖动）
CTRL-X，C，V剪切所选的副本或粘贴
CTRL-Z，Y撤消，重做
CTRL-F在当前选项卡中搜索文本
CTRL-G再次重复上一次搜索
CTRL-L跳转到行号
CTRL-UP，DOWN跳转到开始或结束
ALT-UP，DOWN导航到上一个，下一个功能
CTRL-向左，向右按单词跳转
CTRL-W，E跳转到当前行的开头或结尾
CTRL-D复制当前行
使用TAB缩进选择（移至不缩进）
CTRL-B注释/取消注释选定的块

要输入代表按钮（和其他字形）的特殊字符，请使用SHIFT-L，R，U，D，O，X
还有3种可以切换的字体输入模式：

CTRL_J平假名//输入romanji等效项（ka，ki，ku ..）
CTRL-K片假名// // shift-0..9以获得额外的符号
CTRL-P Puny字体//保持标准字体的移位


::标签

单击顶部的[+]按钮添加一个新标签。
通过单击鼠标左键或使用ctrl-tab，shift-ctrl-tab来导航选项卡。
要删除最后一个标签，请删除所有内容，然后再将其移开（CTRL-A，del，ctrl-tab）
在运行购物车时，通过按顺序将所有选项卡连接在一起可以生成一个程序。


::代码限制

当前代码令牌的数量显示在右下角。一个程序可以有一个
最多8192个令牌。每个令牌是一个单词（例如变量名）或运算符。对
括号和字符串都算作1个令牌。逗号，句点，LOCAL，分号，END，
和评论不计算在内。

右键单击以浏览其他统计信息（字符数，压缩大小）。
如果达到极限，警告灯将闪烁。可以通过右键单击禁用它。


::精灵编辑器

Sprite编辑器旨在用于Sprite方式的编辑和自由格式
像素级编辑。屏幕底部的精灵导航器提供了8x8的
查看sprite-sheet，但在以下情况下可以使用自由格式工具（平移，选择）
处理更大或更奇怪的区域。

绘图工具
单击并拖动精灵以绘制像素
适用于可见区域
按住CTRL键搜索和替换颜色
使用鼠标右键选择颜色

印章工具
单击以标记复制缓冲区中的任何内容
按住LCONTROL可将颜色0（黑色）视为透明

选择工具//快捷方式：LSHIFT或S
创建一个选择
输入或单击以选择无。

如果不存在按像素选择，则会应用许多操作
进行精灵选择或可见视图。要选择精灵，请在精灵导航器中按住Shift并拖动。
要选择精灵表，请按ctrl-A（重复以关闭与地图数据共享的下半部分）

平移工具//快捷方式：空格
查看子画面。

填充工具
用当前颜色填充
适用于当前选择
如果没有选择，则应用于可见区域

形状工具
单击工具按钮以循环显示：圆形，矩形，直线
按住Ctrl可获取实心圆或矩形


额外的钥匙
CTRL-Z撤消
CTRL-C复制所选区域或所选精灵
CTRL-V粘贴到当前精灵位置
Q，W切换到上一个/下一个精灵
1,2切换到上一个/下一个颜色
标签以切换全屏视图
鼠标滚轮或<和>进行缩放（以全屏居中）


在选定区域或选定精灵上的操作：
f翻转
v垂直翻转
r旋转（必须为正方形选择）
光标键移动（如果选择精灵，则循环播放）

精灵标志
8个彩色圆圈是当前子画面的子画面标志。
每个都可以为true（开）或false（关），并由
使用FSET和FGET函数。它们从0开始，从
左侧（0,1,2..7）。有关更多信息，请参见fset（）。


::地图编辑器

PICO-8映射是一个8位值的128x32（或使用共享空间为128x64）块。
每个值在编辑器中都显示为对精灵（0..255）的引用，但是您可以
当然可以使用数据来表示您喜欢的任何内容。

这些工具类似于在精灵编辑模式下使用的工具。选择一个精灵
然后单击并拖动以将值绘制到地图中。

要绘制多个精灵，请使用shift + Drag从精灵导航器中选择
要复制值块，请使用选择工具，然后使用图章工具进行粘贴
要在地图上平移，请使用平移工具或按住空格键
Q，W切换到上一个/下一个精灵
鼠标滚轮或<和>进行缩放（以全屏居中）

要在Spritesheet中移动Sprite而不破坏地图中对它们的引用，请执行以下操作：

1.备份墨盒！
2.（可选）选择要更改的地图区域（默认为上半部分）
//两次按ctrl-A键以查看包括共享内存在内的整个地图。
3.选择要移动的精灵（仍在地图视图中），然后按Ctrl-X
4.选择目标精灵（也在地图视图中），然后按Ctrl-V


:: SFX编辑器

盒带中有64个SFX（“音效”），用于声音和音乐。

每个SFX有32个音符，每个音符具有：
频率（C0..C5）
乐器（0..7）
一卷（0..7）
效果（0..7）

每个SFX还具有以下属性：

演奏速度（SPD）：演奏每个音符的“滴答声”的数量。
//这表示1最快，3慢3倍，依此类推。

循环开始和结束：这是要循环回并移至的音符索引
//当起始索引> =结束索引时，循环将关闭

有2种用于编辑/查看SFX的模式：音高模式（更适合
（用于声音效果）和跟踪器模式（更适合音乐）。模式
可以使用左上方的按钮进行更改，也可以使用TAB进行切换。


1.音高模式

在音高区域上单击并拖动以设置每个音符的频率，
使用当前选择的仪器（以颜色表示）。

按住Shift键仅应用所选乐器
按住CTRL键将输入的音符捕捉到C小调五音阶


2.追踪器模式

每个音符显示：频率八度乐器的音量效果
要输入音符，请使用q2w3er5t6y7ui zsxdcvgbhnjm（类似钢琴的布局）
输入音符以移调-1八度.. +1八度时按住Shift
为新音符提供选定的乐器/效果值
要删除记事，请使用退格键或将音量设置为0

单击，然后按住Shift单击以选择可以复制的范围
（CTRL-C）和粘贴（CTRL-V）

导航：
PAGEUP / DOWN或CTRL-UP / DOWN跳过4个音符
HOME / END跳到第一或最后一个音符
CTRL-LEFT / RIGHT在列间跳转


3.两种模式的控件

-+导航当前的SFX
<>更改速度。
播放/停止的空间
从当前SFX季度开始播放SHIFT-SPACE（8个音符组）
A释放循环样品
左键单击或右键单击以增加/减小SPD或LOOP值
//单击以按住Shift键增加/减少4
//或者，单击并向左/向右或向上/向下拖动
按住Shift键并单击一个乐器，效果或音量可应用到所有音符。


::效果

0无
1张幻灯片//滑动到下一个音符和音量
2颤音//在四分之一音调内快速改变音高
3 drop //将频率迅速降低到非常低的值
4淡入//将音量从0升高
5淡出//将音量降低到0
快速6琶音//以4的速度遍历4个音符的组
7慢速琶音//以8的速度迭代4个音符的组

如果SFX速度<= 8，琶音速度减半为2、4


::音乐编辑器

PICO-8中的音乐由一系列“模式”控制。每个模式都是
4个数字，指示将在该通道上播放哪个SFX。


：： 流量控制

可以使用右上角的3个按钮控制播放流程。

某个花样播放完毕后，将播放下一个花样，除非：

-没有剩余数据可播放（音乐停止）
-在该模式上设置了STOP命令（第三个按钮）
-设置了LOOP BACK命令（第二个按钮），在这种情况下音乐播放器会进行搜索
返回带有LOOP START命令（第一个按钮）的模式，或者返回到
如果未找到，则为模式0。

当某个花样具有不同速度的SFX时，花样完成播放
最左侧的非循环通道已播放完毕。这可以用来设置
不分为32的拍号，或两次拍鼓的拍子等。


::在盒带之间或盒带内复制音乐

要选择一系列图案：单击图案中的第一个图案
导航器，然后按住Shift键并单击最后一个模式。所选图案可以复制
并粘贴CTRL-C和CTRL-V。粘贴到另一个墨盒中时，SFX
每个模式指向的位置也会被粘贴（可能使用不同的索引）
如果尚不存在。


:: SFX乐器

除了8种内置仪器外，还可以使用以下方法定义自定义仪器
前8个SFX。使用乐器右侧的切换按钮选择一个
索引，它将在乐器通道中显示为绿色而不是粉红色。

演奏SFX乐器音符时，实际上会触发该SFX，但会改变
笔记的属性：

相对于C2添加了音高
音量乘以
效果将应用在SFX乐器的效果之上

例如，可以通过定义一种乐器来实现简单的颤音效果
在SFX 0中迅速在音量5和2之间切换。
演奏音符，音量可以像往常一样（通过音量通道）进行更改
或使用淡入/淡出效果）。这样，SFX仪器可用于控制
音量，间距和纹理的详细变化的组合。

SFX乐器仅在音高变化或前一音符发生时才重新触发
音量为零。这对于随时间变化较慢的乐器很有用。
例如：逐渐消失的铃铛。要反转此行为，请执行效果3
（通常为“放下”）可在触发音符时使用。所有其他效果值具有
触发SFX工具时的通常含义。


================================================== =========================================
Lua语法入门
================================================== =========================================

PICO-8程序使用Lua语法编写，但不使用标准Lua库。
以下是基本Lua语法的简要摘要。

有关更多详细信息，或要查找有关正确的Lua的信息，请访问www.lua.org。

：： 注释

-使用这样的两个连字符来忽略所有内容，直到行尾
-[[多行
注释 ]]


::类型和分配

Lua中的类型是数字，字符串，布尔值和表格：

NUM = 12/100
S =“这是一个字符串”
B =假
T = {1,2,3}

PICO-8中的数字均为16:16定点。范围从-32768.0到32767.99999

可以使用带有可选小数部分的十六进制表示法：
0x11-17
0x11.4000-17.25

以十进制表示的数字将四舍五入到最接近的定点值。看到
32位十六进制表示形式，请使用PRINT（TOSTR（VAL，TRUE））：

TOSTR（-32768，TRUE）-0x8000.0000
TOSTR（32767.99999，是）-0x7fff.ffff

如果为零，则除以零的结果为0x7fff.ffff；如果为负，则除以-0x7fff.ffff。


::条件句

如果不是然后
打印（“ B IS FALSE”）
其他
打印（“ B不是虚假”）
结束

-使用ELSEIF

如果X == 0然后
打印（“ X IS 0”）
ELSEIF X <0然后
打印（“ X是负数”）
ELSEIF X> 0然后
打印（“ X为正”）
其他
打印（“从未达到此线”）
结束

如果（4 == 4）THEN PRINT（“ EQUAL”）END
如果（4〜= 3）THEN PRINT（“ NOT EQUAL”）END
如果（4 <= 4）然后打印（“小于等于”）结束
如果（4> 3）然后打印（“大于”）结束

::循环

对于X = 1,5 DO
打印（X）
结束
-打印1,2,3,4,5

X = 1
当（X <= 5）做
打印（X）
X = X + 1
结束

对于X = 1,10,3 DO PRINT（X）END-1,4,7,10

对于X = 5,1，-2 DO PRINT（X）END-5,3,1


::函数和局部变量

Y = 0
功能PLUSONE（X）
局部Y = X + 1
返回Y
结束
打印（PLUSONE（2））-3
打印（Y）-0


::桌子

在Lua中，表是键值对的集合，其中键和值类型都可以
混在一起。通过使用整数对它们进行索引，可以将它们用作数组。

A = {}-创建一个空表
A [1] =“ BLAH”
A [2] = 42
A [“ FOO”] = {1,2,3}

-数组默认使用基于1的索引

A = {11,12,13,14}
打印（A [2]）-12

-用从1开始的连续整数索引的表的大小：

打印（#A）-4

-可以使用点表示法写入字符串索引

玩家= {}
PLAYER.X = 2-等效于PLAYER [“ X”]
PLAYER.Y = 3

-另请参阅以下api参考中的表格部分。


:: PICO-8速记

PICO-8还允许几种非标准的，较短的方法来编写通用模式。

1. IF THEN END语句可以单行写成：

如果（不是B）I = 1 J = 2
-等效于：如果NOT B THEN I = 1 J = 2 END
-请注意，需要在速记条件周围加括号。


2.一元数学运算符

如果整个语句在一行上，也可以使用一元数学运算符。

a + = 2-等效于：a = a + 2
a-= 2-等效于：a = a-2
a * = 2-等效于：a = a * 2
a / = 2-等效于：a = a / 2
a％= 2-等效于：a = a％2


3.！=运算符

不是简写形式，但pico-8还接受！=代替〜=表示“不等于”


================================================== =========================================
API
================================================== =========================================

PICO-8是基于Lua编程语言构建的，但不包括Lua标准库。
取而代之的是，提供了一个小的api以符合PICO-8的最小设计和有限的屏幕
空间。有关使用大多数api函数的示例程序，请参见/DEMOS/API.P8

函数在这里写为：
function_name参数[optional_parameter]

从命令行调用的系统函数可以省略通常的括号和字符串引号：
加载blah.p8->加载（“ blah.p8”）


-------------------------------------------------- -------------------------------------------------- ----
系统
-------------------------------------------------- -------------------------------------------------- ----


加载文件名[readcrumb [param_str]]
保存文件名

装入或保存墨盒

从正在运行的盒带加载时，已加载的盒带将立即运行
参数字符串param_str，然后插入一个菜单项并将其命名为“面包屑”，即
使用户返回到装载盒。

以“＃”开头的文件名将被视为BBS购物车，其ID为：
load（“＃1234”）-下载[并运行]购物车编号1234

如果ID是购物车的父帖子，或未指定修订号，则最新
版本已获取。 BBS购物车可以从其他BBS购物车或本地购物车加载，但不能从其他BBS购物车加载
出口车。


夹

打开主机操作系统中的carts文件夹。


ls（也别名为dir）

列出当前目录中的文件。从正在运行的程序中调用时，返回一个列表
同一目录中的所有.p8和.p8.png文件。


跑

从程序开始运行
可以从程序内部调用以重置程序。


停止[消息]

停止购物车并选择打印一条消息


恢复

通过重新进入mainloop，从现有程序状态继续（需要_update / _draw）
使用单个“。”从命令行前进单个帧。


重启

重新启动机器
对于启动新项目很有用

信息

打印出有关墨盒的一些信息：
代码大小，令牌，压缩大小

还显示：

未保存的更改当内存中的盒带与磁盘上的盒带不同时
外部更改自装入磁带以来，磁盘上的磁带已更改
（例如，通过使用单独的文本编辑器编辑程序）


翻转

将后缓冲区翻转到屏幕上，然后等待下一帧（30fps）
通常不需要这样做-_draw（）为您调用它。

如果您的程序在框架上升之前未调用flip，则调用_draw（）
如果未进行，则将后缓冲区的当前内容复制到屏幕。


printh str [文件名] [覆盖]

打印一个字符串到主机操作系统的控制台进行调试。

如果设置了文件名，则将该字符串附加到主机操作系统上的文件中
//（在当前目录中-使用文件夹查看）
将overwrite设置为true会导致该文件被覆盖而不是附加。

使用文件名“ @clip”写入主机的剪贴板。
//使用stat（4）读取剪贴板，但剪贴板的内容仅
//在运行时按CTRL-V后可用（出于安全原因）。


时间/ t

返回自墨盒运行以来经过的秒数。

这不是实际时间，而是通过计算次数来计算的
_update或_update60被调用。从同一帧多次调用time（）
同样的结果。


统计x

获取x的系统状态：

0内存使用率（0..2048）
自上次翻转以来已使用1个CPU（1.0 == 30fps时100％CPU）
4剪贴板内容（在用户按下CTRL-V之后）
6参数字符串
7当前帧率

16..19当前在通道0..3上播放SFX的索引
20..23通道0..3上的音符编号（0..31）
24当前正在播放的模式索引
共打了25个花样
以当前模式播放26次滴答声

80..85 UTC时间：年，月，日，小时，分钟，秒
90..95当地时间

100当前的面包屑标签，或者为nil


extcmd x

特殊系统命令，其中x是字符串：

“暂停”请求打开暂停菜单
“重置”请求购物车重置
“ go_back”跟随当前的面包屑（如果有的话）
“标签”设置购物车标签
“屏幕”保存屏幕截图
“录制”设置视频起点
“视频”将.gif保存到桌面
“ audio_rec”开始录制音频
“ audio_end”将录制的音频保存到桌面
“关机”退出墨盒（来自导出的二进制文件）


-------------------------------------------------- ------------------------------------------
程序结构
-------------------------------------------------- ------------------------------------------

如果用户定义了3种特殊功能，则在编程过程中会调用它们
执行：

_update（）
每次更新以30fps调用一次

_画（）
每个可见帧调用一次

_在里面（）
程序启动时调用一次


_draw（）通常以30fps的速度调用，但如果无法及时完成，PICO-8将
尝试以15fps的速度运行，并在每个可见帧调用两次_update（）进行补偿。


::以60fps的速度运行PICO-8

如果定义了_update60（）而不是_update（），PICO-8将以60fps模式运行：

-以60fps的速度调用_update60（）和_draw（）
-每帧可使用一半的PICO-8 CPU，然后降至30fps

请注意，并非所有主机都能够以60fps的速度运行。旧机器
和/或网络版本可能还会要求PICO-8以30 fps（或15 fps）的速度运行，即使
当PICO-8 CPU没有过载时。在这种情况下，多个_update60调用
对于每个_draw调用都以相同的方式进行。


-------------------------------------------------- ------------------------------------------
＃包括
-------------------------------------------------- ------------------------------------------

可以在启动盒带时（但不能在运行时）将源代码注入程序中，
使用“ #INCLUDE FILENAME”，其中FILENAME是纯文本文件（包含Lua
代码），另一个墨盒中的一个标签或另一个墨盒中的所有标签：

＃包含SOMECODE.LUA
＃包含ONETAB.P8：1
＃包含ALLTABS.P8

当盒带运行时，每个包含的文件的内容都被视为具有
粘贴到编辑器中代替该行。

-文件名是相对于当前盒带的（因此，需要先保存）
-包含不是递归执行的。
-正常字符数和令牌限制适用。

当盒带另存为.P8.PNG或导出为二进制文件时，所有包含的文件都会
展平并与盒带一起保存，因此没有外部依赖性。

#INCLUDE可用于类似以下的事情：

-在墨盒之间共享代码（库或通用的多推车代码）
-使用外部代码编辑器，而无需直接编辑.p8文件。
-将盒带视为加载PICO-8编辑工具进行修改的数据文件。
-加载和存储由外部（非PICO-8）工具生成的数据。


-------------------------------------------------- ------------------------------------------
图形
-------------------------------------------------- ------------------------------------------
  
PICO-8的固定容量为128个8x8子画面，另外128个与
地图数据的下半部分（“共享数据”）。这256个精灵被统称为
Sprite工作表，可以将其视为128x128像素的图像。

PICO-8的所有绘制操作均受当前绘制状态的影响。抽签状态
包括相机位置（用于向所有坐标添加偏移量），调色板映射
（用于为精灵重新着色），裁剪矩形，绘图颜色和填充图案。

每次运行程序时都会重置绘制状态。这等效于调用：
clip（）camera（）pal（）color（）


颜色指数：

0黑色1暗蓝色2暗紫色3暗绿色
4棕色5深灰色6浅灰色7白色
8红色9橙色10黄色11绿色
12蓝色13靛青14粉色15桃红色


剪辑[x y w h]

设置屏幕的裁剪区域（以像素为单位）
clip（）重设


pget x y
pset x y [c]

获取或设置x，y处像素的颜色（c）。


积x y
sset x y [c]

获取或设置Spritesheet像素的颜色（c）。


fget n [f]
fset n [f] v

获取或设置精灵标志的值（v）
f是标志索引0..7
v是布尔值，可以为true或false

标志0..7的初始状态可以在Sprite编辑器中设置，
使用彩色小按钮线。

Sprite标志的含义由用户决定，或者可以用来
指出应通过地图绘制哪些组（“图层”）子画面。

如果省略标志索引，则将所有标志检索/设置为位字段
fset（2，1 + 2 + 8）-设置位0,1和3
fset（2，4，true）-设置第4位
print（fget（2））-27（1 + 2 + 8 + 16）


打印str [x y [col]]

打印一个字符串
如果仅提供str，并且光标到达屏幕的末尾，
回车和垂直滚动自动应用。


光标x y [col]

设置光标位置和回车边距
如果指定了col，则还要设置当前颜色。


颜色[col]

设置绘图功能要使用的当前颜色
如果未指定col，则当前颜色设置为6

cls [col]

清除屏幕并重置裁剪矩形


相机[x y]

为所有绘图操作将屏幕偏移设置为-x，-y
camera（）重设


circ x y r [col]
circfill x y r [col]

在半径为r的x，y处画一个圆或实心圆
如果r为负，则不画圆


行x0 y0 [x1 y1] [col]

画线
如果未给出x1，y1，则使用最后绘制的线的末尾


rect x0 y0 x1 y1 [col]
rectfill x0 y0 x1 y1 [col]

画一个矩形或实心矩形


朋友c0 c1 [p]

在随后的绘图调用中或在整个屏幕范围内，将调色板颜色c0交换为c1。

PICO-8的绘制状态有两个调色板。 p指定要修改的那个，默认为0：

0个绘图调色板：颜色在绘图上重新映射//例如重新着色精灵
1个屏幕调色板：重新映射显示的颜色//例如用于淡入淡出或全屏效果

例如，在绘制精灵时将颜色12（蓝色）替换为颜色8（红色）：

PAL（8,12）
精神（1,60,60）

PAL（）重置为系统默认值（包括透明度值和填充模式）


朋友tbl [p]

当pal的第一个参数是表格时，将为每个条目分配颜色。
例如，要将颜色12和14重新映射为红色：

PAL（{[12] = 9，[14] = 8}）

或为整个屏幕阴影重新着色为灰色（包括已绘制的所有内容）：

PAL（{1,1,5,5,5,6,7,13,6,7,7,6,13,6,7}，1）


盐c [t]

将颜色索引的透明度设置为t（布尔值）
通过spr（），sspr（），map（）和tline（）观察透明度

PALT（8，TRUE）-在后续的sprite / tline绘制调用中未绘制红色像素

palt（）重置为默认值：除颜色0外，所有颜色均为不透明

当c是唯一的参数时，它将被视为用于设置所有16个值的位域。
例如：将颜色0和1设置为透明：

PALT（0b1100000000000000）


spr n x y [w h] [flip_x] [flip_y]

在位置x，y上绘制精灵n（0..255）
默认情况下，width和height为1,1，并指定要变灰的精灵数量。
默认将颜色0绘制为透明（请参阅palt（））
flip_x = true可水平翻转
flip_y = true可垂直翻转


sspr sx sy sw sh dx dy [dw dh] [flip_x] [flip_y]

从子画面（sx，sy，sw，sh）拉伸矩形//以像素为单位
并绘制矩形（dx，dy，dw，dh）
默认将颜色0绘制为透明（请参阅palt（））
dw，dh默认为sw，sh
flip_x = true可水平翻转
flip_y = true可垂直翻转


填充

PICO-8填充图案是通过以下方式观察到的4x4 2色平铺图案：
circ（）circfill（）rect（）rectfill（）pset（）line（）

p是从最高位开始读取的位域。计算值
的p为所需的模式，将位值加在一起：

.-----------------------。
| 32768 | 16384 | 8192 | 4096 |
| ----- | ----- | ----- || ----- |
| 2048 | 1024 | 512 | 256 |
| ----- | ----- | ----- || ----- |
| 128 | 64 | 32 | 16 |
| ----- | ----- | ----- || ----- |
| 8 | 4 | 2 | 1 |
'-----------------------'

例如，FILLP（4 + 8 + 64 + 128 + 256 + 512 + 4096 + 8192）将创建一个棋盘图案。

这可以用二进制更整洁地表达：FILLP（0b0011001111001100）
默认填充图案为0，这表示绘制了单色。

要为图案指定第二种颜色，请使用任何color参数的高位：

填充（0b0011010101101000）
CIRCFILL（64,64,20，0x4E）-棕色和粉红色

可以设置一个附加的位0b0.1来指示未绘制第二种颜色。

FILLP（0b0011001111001100.1）-带有透明正方形的棋盘

也可以通过在任何颜色参数中设置位来设置填充图案：

POKE（0x5F34，1）-设置集成的fillpattern +颜色模式
CIRCFILL（64,64,20，0x114E.ABCD）-将填充模式设置为ABCD

-位0x1000.0000表示应观察到非彩色位
-位0x0100.0000透明位
-0x00FF.0000位是通常的颜色位
-位0x0000.FFFF被解释为填充模式



tline x0 y0 x1 y1 mx my [mdx mdy]

从（x0，y0）到（x1，y1）绘制一条纹理线，从地图上读取颜色值。
MX，我是地图方块中的地图座标。
mdx，mdy是绘制每个像素后添加到mx，my的增量。 （默认为1/8，0）


地图坐标（mx，my）被以下地址的值掩盖
//它们的值必须是2的幂（8,16,32 ..）

戳（0x5F38，宽度）
戳（0x5F39，高度）


-------------------------------------------------- ------------------------------------------
桌子
-------------------------------------------------- ------------------------------------------


加电视

将值v加到表t的末尾。
等效于t [＃t + 1] = v

FOO = {}-创建空表
加（FOO，11）
加（FOO，22）
打印（FOO [2]）-22


数字电视

删除表t中值v的第一个实例
其余条目向左移一个索引，以避免出现漏洞。
请注意，v是要删除的项目的值，而不是表中的索引！
可以在迭代表时安全地在表的项目上调用del（）。

A = {1,10,2,11,3,12}
对于所有项目
如果（ITEM <10）THEN DEL（A，ITEM）结束
结束
FOREACH（A，PRINT）-10,11,12
打印（A [3]）-12


全部

在FOR循环中使用，以遍历表中的所有项（具有从1开始的整数索引），
按照添加顺序。

T = {11,12,13};
加（T，14）
ADD（T，“ HI”）
对于V IN ALL（T）做PRINT（V）END-11 12 13 14 HI
打印（#T）-5


each

对于表t中的每个项目，以该项目作为单个参数调用函数f。

FOREACH（T，PRINT）


对t

在FOR循环中使用，以遍历表t，为每个项目提供键和值。
与all（）不同，pairs（）遍历每个项目，而不管索引方案如何。
不能保证订单。

T = {[“ HELLO”] = 3，[10] =“ BLAH”}
T.BLUE = 5;
对于K，V对（T）
PRINT（“ K：” ..K .. V：“ .. V）
结束

输出：

K：10 v：BLAH
K：HELLO v：3
K：蓝色v：5


-------------------------------------------------- ------------------------------------------
输入值
-------------------------------------------------- ------------------------------------------

btn [i] [p]

获取播放器p的按钮状态（默认为0）
i：0..5：左右右向下button_o button_x
p：玩家索引0..7

除了使用数字代替i外，还可以使用按钮字形。
（在编码编辑器中，使用Shift-L R U D O X）

如果未提供任何参数，则返回播放器0和1的所有12个按钮状态的位域
// P0：位0..5 P1：位8..13

默认键盘到播放器按钮的映射：

播放器0：[DPAD]：光标，[O]：Z C N [X]：X V M
玩家1：[DPAD]：SFED，[O]：LSHIFT [X]：TAB W Q A

**购物车作者注意：何时
使用实体游戏手柄，某些按钮组合可能很尴尬
（向上跳跃/加速，而不是[X]或[O]），甚至是不可能的（向左+向右）


btnp [i [p]]

btnp是“ Button Pressed”的缩写；按下按钮时，它不是真实的，
当按钮按下并且未在最后一帧按下时，btnp返回true。它也是
在15帧之后重复，然后每4帧返回true（以30fps的速度
60fp）。可以用于菜单导航或网格播放器
运动。

可以通过拨以下存储器地址来设置自定义延迟（以30fps为帧）：

POKE（0x5F5C，DELAY）-设置重复之前的初始延迟255表示永不重复。
POKE（0x5F5D，DELAY）-设置重复延迟

在两种情况下，都可以将0用作默认行为（延迟15和4）


-------------------------------------------------- ------------------------------------------
音讯
-------------------------------------------------- ------------------------------------------

sfx n [通道[偏移[长度]]]

在通道（0..3）上从音符偏移量（0..31）播放sfx n以获取长度音符
n -1以停止该通道上的声音
n -2以使该声道上的声音不再循环播放
频道上播放的任何音乐都将暂停
音符数量的偏移量（0..31）

频道-1（默认）以自动选择未使用的频道
频道-2停止声音在任何频道上播放


音乐[n [fade_len [channel_mask]]

从模式n（0..63）开始播放音乐
n -1停止音乐
fade_len以毫秒为单位（默认值：0）
channel_mask指定仅保留音乐的频道
例如在通道0..2上播放：1 + 2 + 4 = 7

保留的通道仍可用于播放声音效果，但仅当
sfx（）显式请求频道索引。


-------------------------------------------------- -------------------------------------------------- ----
地图
-------------------------------------------------- -------------------------------------------------- ----

PICO-8映射是8位Cels的128x32网格，或使用共享内存时为128x64。什么时候
使用地图编辑器，将每个cel的含义视为spritesheet中的索引
（0..255）。但是，它可以代替用作常规数据块。


毫克特
mset x y v

在x，y处获取或设置地图值（v）


映射cel_x cel_y sx sy cel_w cel_h [图层]

在屏幕位置sx，sy（像素）处绘制地图部分（以cel为单位）
如果指定了图层，则仅绘制具有相同标志号集的cel
//位域因此，0x5表示设置位0和位2的绘制精灵。
//默认为所有精灵

例外：sprite 0始终表示为空。

例如地图（0,0，20,20，4,2）
->在地图上从0,0开始绘制4x2 cel块，到屏幕20,20

如果未指定cel_w和cel_h，则默认为128,32
（地图的上半部分-使用128,64表示整个地图，包括共享内存）


-------------------------------------------------- -------------------------------------------------- ----
记忆
-------------------------------------------------- -------------------------------------------------- ----

PICO-8具有3种类型的内存：

1.基本RAM（32k）：请参见下面的布局。用peek（）访问poke（）memcpy（）memset（）
2.购物车ROM（32k）：与基本RAM相同的布局，直到0x4300
3. Lua RAM（2MB）：编译程序+变量

技术说明：//您可能不需要了解这一点

使用编辑器时，要修改的数据在购物车rom中，但是api函数如spr（）
和sfx（）仅在基本ram上运行。 PICO-8自动将购物车ROM复制到基本RAM（即
在3种情况下调用reload（））：

1.装入墨盒时
2.运行墨盒时
3.退出任何编辑器模式时//可使用以下命令关闭：poke（0x5ffe，1）



::基本RAM内存布局

0x0 gfx
0x1000 gfx2 / map2（共享）
0x2000地图
0x3000 gfx标志
0x3100歌曲
0x3200特效
0x4300用户数据
0x5e00持久购物车数据（256字节）
0x5f00绘制状态
0x5f40硬件状态
0x5f80 gpio引脚（128字节）
0x6000屏幕（8k）

用户数据没有特殊含义，可以通过memcpy（），peek（）和poke（）进行任何使用。
持久的购物车数据映射到0x5e00..0x5eff，但仅在调用cartdata（）时存储。
彩色格式（gfx /屏幕）是每字节2个像素：低位编码每对的左像素。
映射格式是每cel一个字节，其中每个字节通常编码一个Sprite索引。


偷看地址
戳地址

读写一个字节到基本内存中的地址。
合法地址为0x0..0x7fff
读取超出范围将返回0
超出范围会导致故障


peek2地址
poke2地址
peek4地址
poke4地址

16位和32位版本。以小尾数格式读写一个数字（val）：
16位：0xffff.0000
32位：0xffff.ffff

addr不需要与2或4字节边界对齐。


memcpy dest_addr source_addr len

将len字节的基本ram从源复制到dest
部分可以重叠


重新加载dest_addr source_addr len [文件名]

与memcpy相同，但从购物车rom复制
代码段（> = 0x4300）受保护，无法读取。
如果指定了文件名，请从其他盒式磁带加载数据。
//（必须是本地的-无法以这种方式读取bbs磁带）


cstore dest_addr source_addr len [文件名]

与memcpy相同，但从基本ram复制到购物车rom
cstore（）等效于cstore（0，0，0x4300）
可用于编写工具来构建购物车或可视化状态
使用地图编辑器/ gfx编辑器绘制地图/ spritesheet。
代码段（> = 0x4300）受保护，无法写入。

如果指定了文件名，则将数据直接写入该文件名
磁盘上的盒带。一次最多可以写入64个盒带。
有关使用cstore的其他说明，请参见“墨盒数据”部分。


memset dest_addr val len

将len字节设置为val
（非常快-可以用来绘制未修剪的水平扫描线等）


-------------------------------------------------- -------------------------------------------------- ----
数学
-------------------------------------------------- -------------------------------------------------- ----

最大x y
最小x
中间x y z

返回参数的最大值，最小值或中间值
例如，mid（7,5,10）返回7


flr x
ceil x

返回等于或小于x或大于x的最接近的整数

？flr（4.1）-> 4
ceil（4.1）-> 5
？flr（-2.3）-> -3
ceil（-2.3）-> -2


cos x
罪恶x

返回x的余弦值，其中1.0表示整转
罪恶被反转以适应屏幕空间
例如sin（0.25）返回-1

如果您希望不使用y反演的基于弧度的触发函数，
将以下代码段粘贴到程序的开始位置附近：

cos1 = cos函数cos（angle）返回cos1（angle /（3.1415 * 2））结束
sin1 = sin函数sin（angle）return -sin1（angle /（3.1415 * 2））end


atan2 dx dy

将dx，dy转换为0..1的角度
与cos / sin一样，角度也要在屏幕空间中逆时针旋转
例如atan（1，-1）返回0.125


平方x

返回x的平方根


腹肌x

返回x的绝对（正）值


rnd x
返回一个随机数n，其中0 <= n <x
如果需要整数，请使用flr（rnd（x））


srand x
设置随机数种子
种子会在购物车启动时自动随机分组


按位运算

按位运算与逻辑表达式相似，不同之处在于它们在位级别工作。

假设您有两个数字（此处使用“ 0b”前缀以二进制形式编写）：

X = 0b1010
Y = 0b0110

当X /和/ Y中的相应位都置位时，按位与将给您设置位

PRINT（BAND（X，Y））-结果：0b0010（十进制2）

PICO-8提供9种按位函数：

band x y-两位都置位
bor x y-任一位置1
bxor x y-任一位置1，但不是两个都置1
bnot x-未设置每个位
shl x n-向左移n位（零从右边进来）
shr x n-算术右移（最左位状态重复）
lshr x n-逻辑右移（左数为零）
rotl x n-将x中的所有位左移n位
rotr x n-将x中的所有位向右旋转n个位

运营商版本也可用于前7个： ^^〜<< >> >>>

例如：PRINT（67＆63）-结果：3等于BAND（67,63）

运算符比其相应功能要快一些。他们的行为完全一样
除了如果任何操作数不是数字，结果是运行时错误（函数版本
而是默认为0）。


整数部

整数除法可以使用\
print（9 \ 2）-结果：4相当于flr（7/2）


-------------------------------------------------- -------------------------------------------------- ----
自定义菜单项
-------------------------------------------------- -------------------------------------------------- ----

menuitem索引[标签回调]

向暂停菜单添加一个额外的项目

索引应为1..5，并确定每个菜单项的显示顺序
标签应为长度不超过16个字符的字符串
回调是当用户选择项目时调用的函数

如果没有标签或功能，菜单项将被删除

例：
menuitem（1，“重新开始拼图”，function（）reset_puzzle（）sfx（10）结束）


-------------------------------------------------- -------------------------------------------------- ----
弦乐
-------------------------------------------------- -------------------------------------------------- ----

s =“褐狐狸”


 -  长度

打印（#s）-> 19


-连接字符串

print（“ three” ..4）->“ three 4”


-sub（）获取子字符串

print（sub（s，5,9））->“快速”
print（sub（s，5））->“快棕色狐狸”


-转换

tostr（17）-返回“ 17”
tostr（17，true）-返回“ 0x0011.0000”
tonum（“ 17”）-返回17
chr（64）-返回“ @”
ord（“ @”）-返回64
ord（“ 123”，2）-返回50（第二个字符：“ 2”）


-------------------------------------------------- -------------------------------------------------- ----
种类
-------------------------------------------------- -------------------------------------------------- ----

val类型

以字符串形式返回值x的类型的名称

tostr val [hex]

以字符串形式返回val

如果hex为true并且val为数字，则无符号十六进制写为
该数字以“ 0x0000.0000”格式返回。您可以使用它来
检查PICO-8数字的内部表示。

如果val是布尔值，则将其写为“ true”或“ false”

所有其他val类型均写为“ [typename]”（使用十六进制包括十六进制）
字符串中的标识（如果有）

托纳瓦尔

将val转换为数字
如果val是字符串，则数字以小数表示，除非前缀为“ 0x”
如果转换失败，则tonum不返回任何值。


-------------------------------------------------- ------------------------------------------
墨盒数据
-------------------------------------------------- ------------------------------------------

使用cartdata（），dset（）和dget（），可以获得64个数字（256个字节）的持久数据
可以存储在用户的PICO-8上，该PICO-8在卸载购物车后仍然存在，或者
PICO-8关闭。这可以用作存储诸如
高分或保存玩家进度。它也可以用来共享数据
墨盒/墨盒版本。

如果您需要256个以上的字节，也可以直接写入
使用cstore（）的墨盒。缺点是数据与
墨盒的特定版本。例如如果游戏进行了更新，玩家将
失去他们的储蓄游戏。另外，盒带数据部分中的一些空间
需要保持可用状态。

另一种选择是通过指定直接写入第二个盒带
cstore（）的第四个参数。这需要更换购物车（实际上
仅表示用户需要观看购物车动画1秒钟）。

CSTORE（0,0,0x2000，“ spritesheet.p8”）
-以后：
RELOAD（0,0,0x2000，“ spritesheet.p8”）-恢复保存的数据


cartdata ID

cartdata（）打开一个由id索引的永久数据存储插槽，可以是
用于使用以下命令存储和检索多达256个字节（64个数字）的数据
DSET（）和DGET（）。

CARTDATA（“ zep_dark_forest”）-每个会话只能设置一次
-在程序的后面。
DSET（0，得分）

id是长度不超过64个字符的字符串，应足够特殊以至于
其他墨盒不会意外使用相同的ID。

例如cartdata（“ zep_jelpi”）

合法字符为a..z，0..9和下划线（_）

如果已加载数据，则返回true，否则返回false

每个盒带执行一次不能多次调用cartdata。

设置好cartdata ID后，将映射内存0x5e00..0x5eff的区域
到永久存储，可以直接访问，也可以通过dget / dset访问。


dget索引

获取存储在索引（0..63）上的数字
仅在调用cartdata（）之后使用此方法

dset索引值

设置存储在索引（0..63）的数字
仅在调用cartdata（）之后使用此方法

无需刷新写入的数据-它是自动的
即使直接将POKE（）也保存到永久存储中。


-------------------------------------------------- ------------------------------------------
通用输入输出
-------------------------------------------------- ------------------------------------------

GPIO代表“通用输入输出”，并允许机器与
彼此。 PICO-8将范围为0x5f80..0x5fff的字节映射到可以为
POKE（）ed（以输出值-例如使LED点亮）或PEEK（）ed（例如以读取
开关的状态）。

GPIO对于不同的主机平台意味着不同的含义：

芯片：0x5f80..0x5f87映射到xio-p0..xio-p7
Pocket CHIP：0x5f82..0x5f87映射到GPIO1..GPIO6
// xio-p0和p1暴露在外壳内的原型区域内。
Raspberry Pi：0x5f80..0x5f9f映射到接线Pi引脚0..31
//有关不同模型的映射，请参见http://wiringpi.com/pins/。
//还：注意BCM与WiringPi GPIO索引！

CHIP和Raspberry Pi值均为数字值：0（低）和255（高）

一个简单的程序，用于使打开或关闭的所有LED闪烁：

t = 0
函数_draw（）
cls（5）
对于我= 0,7
值= 0
如果（t％2 <1）val = 255
戳（0x5f80 + i，val）
circfill（20 + i * 12,64,4，val / 11）
结束
t + = 0.1
结束


::序列号

为了更精确地计时，可以使用SERIAL（）命令。 GPIO写入被缓冲和
在每个帧的末尾调度，以更高和/或更规则的频率循环时钟
速度比使用POKE（）调用手动位敲打要快。

序列号（通道，地址，长度）

渠道：
0x000..0x0fe对应于gpio引脚号；发送0x00为低电平或0xFF为高电平
0x0ff延迟；长度是指“持续时间”，以微秒为单位（不包括开销）
0x100..0x101在通道0,1上进行SPI读/写（实验）
0x400..0x401 ws281x LED灯串（实验性）

地址：要读取的PICO-8存储器位置（如果是SPI，则随后写入）
length：要发送的字节数。允许1/8分之一发送部分位字符串。

例如，一次向一个典型的APA102 LED字符串发送一个字节：

VAL = 42-要发送的值
DAT = 16 CLK = 15-数据和时钟引脚取决于设备
POKE（0x4300,0）-要发送的数据（单字节：0或0xff）
戳（0x4301,0xFF）
对于B = 0,7 DO
-发送位（高位先发）
串行（DAT，BAND（VAL，SHL（1,7-B））> 0 AND 0x4301或0x4300，1）
-循环时钟
串行（CLK，0x4301）
SERIAL（0xFF，5）-延迟5
串行（CLK，0x4300）
SERIAL（0xFF，5）-延迟5
结束

:: HTML

导出为HTML / .js的墨盒会使用全局整数数组（pico8_gpio）
代表gpio引脚。外壳HTML应该定义数组：

var pico8_gpio = Array（128）;

-------------------------------------------------- ------------------------------------------
鼠标和键盘输入
-------------------------------------------------- ------------------------------------------

//（实验性的！HTML实施仍然受到限制和错误）

可以通过启用devkit输入模式来实现鼠标和键盘输入：

戳（0x5F2D，1）

请注意，并非每个PICO-8都会连接键盘或鼠标，因此发布时
车到Lexaloffle BBS，鼓励进行键盘和/或鼠标控制
可选，默认情况下默认关闭。启用devkit输入模式后，将显示一条消息
向BBS用户显示，警告他们程序可能期望输入超出
标准的6键控制器。

鼠标和键盘的状态可以在stat（x）中找到：

STAT（30）-（布尔值）当有按键可用时为真
STAT（31）-键盘返回的（字符串）字符
STAT（32）-鼠标X
STAT（33）-鼠标Y
STAT（34）-鼠标按钮（位域）
STAT（36）-鼠标滚轮事件


-------------------------------------------------- ------------------------------------------
Lua的其他功能
-------------------------------------------------- ------------------------------------------

PICO-8还为高级用户提供了Lua的2个功能：Metatables和Coroutines。

有关更多信息，请参见Lua 5.2手册。

::元表

元表可用于定义特定操作下对象的行为。
例如，要使用表格表示可以加在一起的2D矢量，
通过为元表定义“ __add”函数来重新定义“ +”运算符：

vec2d = {
__add = function（a，b）
返回{x =（a.x + b.x），y =（a.y + b.y）}
结束
}

v1 = {x = 2，y = 9}可设置（v1，vec2d）
v2 = {x = 1，y = 5}可设置（v2，vec2d）
v3 = v1 + v2
print（v3.x ..“，” .. v3.y）-3,14


可设定t，m

将表t metatable设置为m


可获取的

返回表t的当前元表；如果未设置，则返回nil


原始t键值
原始密钥
原始等式t1 t2
罗文

对表的原始访问，就好像没有定义任何元方法一样


::协程

协程提供了一种在并发状态下运行程序不同部分的方法
方式，类似于线程。函数可以称为协程，以
yield（）任意次，然后在相同点再次恢复。

函数hey（）
打印（“做某事”）
让（）
打印（“做下一件事”）
让（）
打印（“完成”）
结束

c =共同创建（嘿）
对于i = 1,3做coresume（c）结束


共同创建

为函数f创建一个协程。


核心c [p0 p1 ..]

运行或继续协程c。参数p0，p1 ..被传递给
协程的功能。

如果协程完成没有任何错误，则返回true
返回false，如果有错误，则返回error_message。

**协程内部发生的运行时错误不会导致程序
停止运行。将coresume（）包装在assert（）中是一个好主意。
如果断言失败，它将打印由生成的错误消息
核心

断言（coresume（c））


肋骨

以字符串形式返回协程c的状态：
“跑步”
“已暂停”
“死”

让

暂停执行并返回到调用方。