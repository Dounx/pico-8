============================================================================================

	PICO-8 v0.2.0c
	https://www.pico-8.com
	(c) 2014-2020 Lexaloffle Games LLP 版权所有
	作者：Joseph White // hey@lexaloffle.com

	PICO-8 基于：
		SDL2 http://www.libsdl.org
		Lua 5.2 http://www.lua.org  // 参见 license.txt
		ws281x by jgarff            // 参见 license.txt
		GIFLIB http://giflib.sourceforge.net/
		WiringPi http://wiringpi.com/
		libb64 by Chris Venter

============================================================================================

欢迎使用 PICO-8！

	PICO-8 是一款可用于制作，共享和游玩小游戏以及其他计算机程序的虚构游戏机。
	当您启动它时，会显示一个可输入 Lua 程序的 Shell 并提供
	用于创建精灵（sprites），地图和声音的简单内置工具。

	PICO-8 精心设计的严格限制，是为了让开发者感觉使用它工作很有趣，鼓励小
	但富有表现力的设计，并希望为 PICO-8 卡带提供独特的外观和感觉。


:: 按键

	切换全屏：Alt + Enter
	退出：Alt + F4 或 Command-Q
	重新加载/运行/重新启动卡带：Ctrl + R
	快速保存：Ctrl + S
	静音/取消静音：Ctrl + M
	玩家 1 默认值：光标 + ZX / NM / CV
	玩家 2 默认值：SDFE + Tab，Q / Shift A
	Enter 或 P 呼出暂停菜单（运行时）
	// 使用 KEYCONFIG 更改默认值。


:: 参数

	显示：128x128，固定 16 种颜色
	输入：6 个按键
	卡带大小：32k
	声音：4 声道，64 个可定义的声音
	代码：Lua（最多 8192 个代码 token）
	精灵：一组 128 个 8x8 精灵（另外还有 128 个共享的）
	地图：128x32 个 8-bit 单元（另外还有 128x32 个共享的）


:: 你好，世界

	在启动 PICO-8 之后，尝试输入以下命令并按下回车：

		PRINT("HELLO WORLD")
		RECTFILL(80,80,120,100,12)
		CIRCFILL(70,90,20,14)
		FOR I=1,4 DO PRINT(I) END

	（注意：PICO-8 仅显示大写字符 -- 只需正常输入不需要启用大写键！）

	您可以通过在代码编辑模式中使用类似这样的命令
	以及两个特殊的回调函数 _UPDATE 和 _DRAW 来构建交互式程序。
	例如，以下程序允许您使用方向键使圆移动。
	按 Esc 键切换到代码编辑器，然后键入或复制并粘贴以下代码：

	X = 64  Y = 64
	FUNCTION _UPDATE()
	 IF (BTN(0)) THEN X=X-1 END
	 IF (BTN(1)) THEN X=X+1 END
	 IF (BTN(2)) THEN Y=Y-1 END
	 IF (BTN(3)) THEN Y=Y+1 END
	END

	FUNCTION _DRAW()
	 CLS(5)
	 CIRCFILL(X,Y,7,14)
	END

	现在按下 Esc 返回到控制台，然后键入 RUN（或按 CTRL-R）以查看其运行情况。
	请参阅 demo 卡带来查看更复杂的程序（键入 INSTALL_DEMOS）。

	如果要存储程序供以后使用，请使用 SAVE 命令：

	> SAVE PINKCIRC

	再次加载：

	> LOAD PINKCIRC


:: 示例卡带

	这些卡带包含在 PICO-8 中，可以通过键入以下内容进行安装：

	INSTALL_DEMOS
	CD DEMOS
	LS

	HELLO      Greetings from PICO-8
	API        Demonstrates most PICO-8 functions
	JELPI      Platform game demo w/ 2p support 
	CAST       2.5D Raycaster demo
	DRIPPY     Draw a drippy squiggle
	WANDER     Simple walking simulator
	COLLIDE    Example wall and actor collisions

	要运行卡带，请打开 PICO-8 并键入：

	LOAD JELPI
	RUN

	按 Esc 键停止程序，再按一次进入编辑模式。

	也可以通过以下方式安装少量来自于社区的卡带：INSTALL_GAMES



:: 文件系统

	这些命令可用于管理文件和目录（文件夹）：

	LS          列出当前目录
	CD BLAH     更改目录
	CD ..       上一个目录
	CD /        回到顶层目录（在 PICO-8 的虚拟驱动器上）
	MKDIR BLAH  创建目录
	FOLDER      在主机操作系统的文件浏览器中打开当前目录

	LOAD BLAH  从当前目录加载卡带
	SAVE BLAH  将卡带保存到当前目录

	如果要移动文件，复制或删除文件，
	请使用 FOLDER 命令并在主机操作系统中执行。

	PICO-8 的驱动器的默认位置是：

	Windows: C:/Users/Yourname/AppData/Roaming/pico-8/carts
	OSX: /Users/Yourname/Library/Application Support/pico-8/carts
	Linux: ~/.lexaloffle/pico-8/carts

	您可以在 pico-8/config.txt 中更改此设置和其他设置

	提示：可以将驱动器目录映射到云驱动器（由Dropbox，Google或类似服务）
	以创建在多个 PICO-8 计算机之间共享的单个磁盘。


:: 加载和保存

	当使用 LOAD 和 SAVE 时，.P8 扩展名可以省略（自动添加）。

	保存为. p8.png 扩展名将以一种特殊的图像格式保存卡带，使其看起来像卡带。

	使用文件名 "@CLIP" 加载或保存到剪贴板。

	卡带加载或保存后，也可以使用 CTRL-S 快速保存

	:: 保存带有文本标签和预览图像的 .p8.png 卡带

		要生成保存在卡带中的标签图像，请先运行该程序，然后按 CTRL-7 进行抓取
		屏幕上的所有内容。代码以“--”开头的前两行也会被绘制到卡带的标签。

		例如
		-- OCEAN DIVER LEGENDS
		-- BY LOOPY


	:: .png 格式的代码大小限制

		以 .png 格式保存时，代码的压缩大小必须小于 15360 字节。
		要查看代码的当前大小，请使用 INFO 命令。
		当以 .p8 格式保存时，代码的压缩大小并不强制限制。


:: 使用外部文本编辑器

	可以使用单独的文本编辑器直接编辑 .p8 文件。
	在以下情况，使用 CTRL-R 运行卡带将自动重新加载文件：

		1. PICO-8 编辑器中没有未保存的更改，并且
		2. 该文件的内容与上次加载的版本不同

	如果对磁盘上的卡带和编辑器中的卡带都进行了更改，则会显示一条通知：

		DIDN'T RELOAD; UNSAVED CHANGES

	PICO-8 不完全支持大写字符，在代码编辑器中查看时它们会自动转换为小写。
	请注意，这还会导致存在未保存的更改，
	这意味着 CTRL-R 将停止自动重新加载磁盘上的版本，
	直到它被手动 LOAD()。

	字形字符（以 shift-A..Z 键入）以 .p8 格式存储（unicode）。


:: 备份

	如果您退出而不保存更改或覆盖现有文件，
	则会有一份卡带备份保存到 {appdata}/pico-8/backup。
	也可以通过键入 BACKUP 保存当前卡带的额外副本到该文件夹中。


::配置

	:: config.txt

		您可以在 config.txt 中找到一些设置。可在 PICO-8 未运行时编辑文件。

		Windows: C:/Users/Yourname/AppData/Roaming/pico-8/config.txt
		OSX: /Users/Yourname/Library/Application Support/pico-8/config.txt
		Linux: ~/.lexaloffle/pico-8/config.txt

		使用 -home 开关（如下所示）来使用其他路径来存储 config.txt 以及其他数据。

		在运行 PICO-8 时，可以通过键入 CONFIG SETTING VALUE 来更改某些设置。
		（单独输入 CONFIG 查看可配置列表）


	:: 命令行参数

		// 注意：这些设置会覆盖 config.txt 中的配置

		pico-8 [switches] [filename.p8]

		-width n                 设置窗口宽度
		-height n                设置窗口高度
		-windowed n              将窗口模式设置为关闭（0）或打开（1）
		-volume n                设置音频音量 0..256
		-joystick n              游戏杆控制从玩家 n（0..7）开始
		-pixel_perfect n         1 表示以整数比例（默认情况下为开）进行未经过滤的屏幕拉伸
		-preblit_scale n         在 blitting 到屏幕之前按 n 缩放显示（与 -pixel_perfect 0 一起使用）
		-draw_rect x,y,w,h       绘制 pico-8 屏幕的绝对窗口坐标和大小
		-run filename            加载并运行卡带
		-x filename              执行 PICO-8 卡带（不绘制图形），然后退出（实验！）
		-export param_str        在非图形模式下运行 EXPORT 命令并退出（请参见 export 下的注释）
		-p param_str             将参数字符串传递到指定的卡带
		-splore                  启动 splore 模式
		-home path               设置存储 config.txt 以及其他用户数据文件的路径
		-root_path path          设置存储卡带的路径
		-desktop path            设置屏幕快照和 gif 的保存位置
		-screenshot_scale n      屏幕截图的比例。默认值：3（368x368 像素）
		-gif_scale n             gif 捕获的比例。默认值：2（256x256 像素）
		-gif_len n               以秒为单位设置最大 gif 长度（1..120）
		-gui_theme n             设置为 1 来启用更高对比度的编辑器配色方案
		-timeout n               下载超时之前要等待的秒数（默认值：30）
		-software_blit n         使用软件 blitting 模式关闭（0）或打开（1）
		-foreground_sleep_ms n   帧之间要休眠的毫秒数。
		-background_sleep_ms n   在后台运行时，帧之间要休眠多少毫秒
		-accept_future n         设置为 1 来使用将来版本的 PICO-8 载入卡带


:: 控制器设置

	PICO-8 使用 SDL2 控制器配置方案。它将在启动时检测通用控制器
	还会在同一目录的 sdl_controllers.txt 中查找自定义映射
	作为 config.txt。sdl_controllers.txt 每行代表一个映射。

	要为您的控制器生成自定义映射字符串，请使用 SDL2 附带的程序 controllermap，
	或尝试 http://www.generalarcade.com/gamepadtool/

	要找出 SDL2 检测到的控制器 ID，请搜索“joysticks”
	或在运行 PICO-8 后在 log.txt 中查看“Mapping”。
	此 ID 在不同的操作系统下可能会有所不同。参见：https://www.lexaloffle.com/bbs/?tid=32130

	要设置哪些键盘键触发操纵杆按钮的按下，请使用 KEYCONFIG。


:: 屏幕截图，视频和卡带标签

	在运行卡带时使用：

		CTRL-6 将屏幕快照保存到桌面
		CTRL-7 捕获卡带标签图像
		CTRL-8 开始录制视频
		CTRL-9 将 GIF 视频保存到桌面（默认情况下，最长 8 秒）

	您可以随时保存视频（始终在录制）-- 使用 CTRL-8 只是重置视频起点。

	要更改最大 gif 长度，请在 config.txt 中编辑 gif_len 以指定要记录的秒数。
	gif 格式不能完全匹配 30fps，因此 PICO-8 使用最接近的：33.3fps。



:: 共享卡带

	共有三种共享 PICO-8 制造的卡带的方式：

		1. 与其他 PICO-8 用户直接共享 .p8 或 .p8.png 文件

			键入 FOLDER 在主机操作系统中打开当前文件夹。

		2. 将卡带发布到 Lexaloffe 社区上以获得可在网络上游玩的版本

			http://www.lexaloffle.com/pico-8.php?page=submit

		3. 将卡带导出到独立的 html/js 或本机二进制文件
			（有关详细信息，请参见导出部分）


:: 导出 / 导入

	EXPORT 命令可用于生成 png，wav 文件以及独立的 html 和本机二进制文件。
	输出格式是根据文件名扩展名推断出来的（例如 .png）。

	您可以根据需要自由分发和使用导出的卡带和数据，
	如果您已获得作者和贡献者的许可。

	:: 精灵表（.png）

		IMPORT BLAH.PNG     --  应当使用 128x128 png 和符合 pico-8 的颜色
		EXPORT BLAH.PNG     --  使用 folder() 定位导出的 png

	:: SFX 和音乐（.wav）

		EXPORT BLAH.WAV     --  从当前模板中导出音乐（当编辑器模式为 MUSIC 时）
		EXPORT BLAH.WAV     --  导出当前的 SFX（当编辑器模式为 SFX 时）
		EXPORT BLAH%D.WAV   --  将所有 SFX 导出为 blah0.wav，blah1.wav .. blah63.wav

	:: HTML 格式（.html）

		导出为独立的 html（foo.html，foo.js）：
		> EXPORT FOO.HTML

		或者只是 .js 文件：
		> EXPORT FOO.JS

		使用 -f 将文件写入名为 foo_html 的文件夹中，使用 index.html 而不是 foo.html
		> EXPORT -F FOO.HTML

		可以使用使用 -p 开关提供自定义 html 模板：
		> EXPORT FOO.HTML -P ONE_BUTTON

		这将使用文件 {application data}/pico-8/plates/one_button.html
		作为 html shell，用 .js 文件名替换特殊字符串 ##js_file##。

		使用 -w 导出为 .wasm + .js // 实验性的！压缩后可减少大约 100k
		> EXPORT -W FOO.HTML


	:: 二进制格式（.bin）

		要为 Windows，Linux（64 位），Mac 和 Raspberry Pi 生成独立的可执行文件，请执行以下操作：

		> EXPORT FOO.BIN

		默认情况下，卡带标签用作不透明的图标。
		要从精灵表中指定图标，请使用 -i 以及可选的 -s 以及 -c
		控制大小和透明度。

			-I N  图标索引 N，默认透明颜色为 0（黑色）。
			-S N  大小为 NxN 的精灵。大小 3 将产生一个 24x24 的图标。
			-C N  将颜色 N 视为透明。使用 16 表示不透明。

		例如，要使用从精灵表的索引 32 开始的大小为 2x2 的精灵，
		并将颜色 12 视为透明：

			> EXPORT -I 32 -S 2 -C 12 FOO.BIN

	:: 上传到 itch.io

		如果要将导出的卡带作为可游玩的 html 上传到 itch.io：

			1. 在 PICO-8 内部：EXPORT -F FOO.HTML
			2. 在 itch 仪表盘创建一个新项目。
			3. 压缩文件夹并上传（设置“This file will be played in the browser”）
			4. 嵌入页面，尺寸为 750px x 680px。
			5. 将“Mobile Friendly”设置为（默认方向），将“Automatically start on page load”设置为打开。
				// 不需要全屏按钮，因为默认的 PICO-8 模板有其自己的按钮。
			6. 将背景（BG2）设置为深色（例如 ＃232323），将文本设置为浅色（#cccccc）


	:: 导出多个卡带

		当导出为独立的 html 或本机二进制文件时，
		可以使用 EXPORT 导出多达 16 个卡带，并将它们捆绑在一起。

		EXPORT FOO.HTML DAT1.P8 DAT2.P8 GAME2.P8

		在运行时，可以像访问本地文件一样访问额外的卡带：

		RELOAD(0,0,0x2000, "DAT1.P8") -- 从 DAT1.P8 加载精灵表
		LOAD("GAME2.P8") -- 加载并运行另一个卡带


	:: 从主机操作系统运行 EXPORT

		启动 PICO-8 时，使用 -export 以文本模式运行导出器。
		输出到当前目录，而不是 PICO-8 文件系统。

		EXPORT 命令的参数作为单个（小写）字母传递：

			pico8 foo.p8 -export "-i 32 -s 2 -c 12 foo.bin dat0.p8 dat1.p8"


	:: 导出卡带的限制

		导出的卡带无法加载和运行社区卡带，例如通过 LOAD("#FOO")



:: Splore

	SPLORE 是一个内置实用程序，用于浏览和组织本地和社区（在线）卡带。
	键入 SPLORE [enter] 以启动它，或使用 -splore 启动 PICO-8。

	可以通过操纵杆完全控制 SPLORE：
	向左和向右浏览卡带列表
	向上和向下选择每个列表中的项目
	X，O 或 MENU 启动卡带

	在卡带内时，按 MENU 即可收藏卡带或退出到 splore。
	如果您使用的是键盘，也可以在卡带列表视图中选择它后，按 F 来收藏一个项目。

	查看社区卡带列表时，请使用顶部项重新下载卡带列表：
	如果您处于离线状态，则会显示上次下载的列表，
	并且您仍然可以游玩之前下载的所有卡带。

	如果您在无法访问互联网的计算机上安装了 PICO-8，则还可以
	使用 INSTALL_GAMES 向 /games 添加少量预装的社区卡带。



:: PICO-8 的怪癖

	要注意的常见陷阱：

	- 精灵表的下半部分和地图的下半部分占用相同的内存（共享内存）。
		// 如果不确定如何使用，最好只使用其中一个。
	- PICO-8 数字最多只能达到 32767.99999（0x7fff.ffff）
		// 如果您在每帧计数器上加 1，它会在大约 18 分钟后溢出！
	- Lua 数组索引默认从 1 开始，而不是 0。 FOREACH 从 TBL[1] 开始，而不是 TBL[0]。
	- COS() 和 SIN() 取 0..1 而不是 0..PI*2，并且 SIN() 取反。
	- SGN(0) 返回 1。
	- 切换全屏：在 OSX 上使用 alt-enter（command-F 用于搜索文本）。
	- 当您要导出 .png 卡带时，请使用 SAVE 而不是 EXPORT。EXPORT 将仅保存精灵表！



============================================================================================
	编辑器模式
============================================================================================

	按 Escape 键可在控制台和编辑器之间切换
	单击右上角的编辑模式选项卡进行切换或按 ALT+LEFT/RIGHT


	** 警告：精灵表的后半部分（第 2 和第 3 组），和地图的
	下半部分共享相同的卡带空间。取决于您如何使用数据，但是
	请注意，在精灵表的后半部分上绘图可能会破坏地图，反之亦然。


:: 代码编辑器

	按住 Shift 键选择（或用鼠标单击并拖动）
	CTRL-X，C，V 剪切，复制和粘贴
	CTRL-Z，Y 撤消，重做
	CTRL-F 在当前选项卡中搜索文本
	CTRL-G 再次重复上一次搜索
	CTRL-L 跳转到行号
	CTRL-UP，DOWN 跳转到开始或结束
	ALT-UP，DOWN 导航到上一个，下一个函数
	CTRL-LEFT，RIGHT 按单词跳转
	CTRL-W，E 跳转到当前行的开头或结尾
	CTRL-D 复制当前行
	使用 TAB 缩进（shift 取消缩进）
	CTRL-B 注释/取消注释选定的块

	要输入代表按钮（和其他字形）的特殊字符，请使用 SHIFT-L，R，U，D，O，X
	还有 3 种可以切换的字体输入模式：

		CTRL-J 平假名      // 输入 romanji 等效项（ka，ki，ku ..）
		CTRL-K 片假名      // shift-0..9 以获得额外的符号
		CTRL-P Puny 字体   // 按住 shift 来使用标准字体


:: 标签

		单击顶部的 [+] 按钮添加一个新标签。
		通过单击鼠标左键或使用 ctrl-tab，shift-ctrl-tab 来导航选项卡。
		要删除最后一个标签，请删除所有内容，然后再将其移开（CTRL-A，del，ctrl-tab）
		在运行卡带时，通过按顺序将所有选项卡连接在一起可以生成一个程序。


:: 代码限制

		当前代码 Token 的数量显示在右下角。一个程序可以有最多 8192 个令牌。
		每个 Token 是一个单词（例如变量名）或运算符。一对括号和字符串都算作 1 个令牌。
		逗号，句点，LOCAL，分号，END，和注释不计算在内。

		右键单击以浏览其他统计信息（字符数，压缩后大小）。
		如果达到限制，警告灯将闪烁。可以通过右键单击禁用它。


:: 精灵编辑器

	精灵编辑器旨在用于精灵级编辑以级像素级编辑。
	屏幕底部的精灵导航器提供了 8x8 的视窗来查看精灵表，
	但在处理更大或更奇怪的区域下可以使用自由格式工具（平移，选择）。

	绘图（Draw）工具
		单击并拖动精灵以绘制像素
		应用于可见区域
		按住 CTRL 键搜索和替换颜色
		使用鼠标右键选择颜色

	标记（Stamp）工具
		单击以标记复制缓冲区中的任何内容
		按住 LCONTROL 可将颜色 0（黑色）视为透明

	选择（Select）工具/ / 快捷方式：LSHIFT 或 S
		创建一个选择
		输入或单击以选择无。

		如果不存在按像素选择，则许多操作会代替精灵级选择或可见视图。
		要选择精灵，请在精灵导航器中按住 Shift 并拖动。
		要选择精灵表，请按 ctrl-A（重复以关闭与地图数据共享的下半部分）

	平移（Pan）工具 // 快捷方式：空格
		查看精灵表。

	填充（Fill）工具
		用当前颜色填充
		应用到当前选择
		如果没有选择，则应用于可见区域

	形状（Shape）工具
		单击工具按钮以循环显示：圆形，矩形，直线
		按住 Ctrl 可获取实心圆或矩形


	额外按键
		CTRL-Z 撤消
		CTRL-C 复制所选区域或所选精灵
		CTRL-V 粘贴到当前精灵位置
		Q，W 切换到上一个/下一个精灵
		1，2 切换到上一个/下一个颜色
		Tab 以切换全屏视图
		鼠标滚轮或 < 和 > 进行缩放（以全屏居中）


	在选定区域或选定精灵上的操作：
		f 翻转
		v 垂直翻转
		r 旋转（必须为正方形选择）
		箭头键移动（如果选择精灵，则整体移动）

	精灵标志
		8 个彩色圆圈是当前精灵的标志。
		每个都可以为 true（开）或 false（关），
		并可以使用 FSET 和 FGET 函数获取。
		它们从 0 开始，从左侧开始依次是 0,1,2..7。
		有关更多信息，请参见 fset()。


:: 地图编辑器

	PICO-8 地图是一个 8-bit 值的 128x32（或使用共享空间为 128x64）大小的块。
	每个值在编辑器中都显示为对精灵（0..255）的引用，
	但是您可以当然可以使用数据来表示您喜欢的任何内容。

	这些工具类似于在精灵编辑模式下使用的工具。
	选择一个精灵然后单击并拖动以将值绘制到地图中。

	要绘制多个精灵，请使用 shift + Drag 从精灵导航器中选择
	要复制一整块值，请使用选择工具，然后使用标记工具进行粘贴
	要在地图上平移，请使用平移工具或按住空格键
	Q，W 切换到上一个/下一个精灵
	鼠标滚轮或 < 和 > 进行缩放（以全屏居中）

	要在精灵表中移动精灵而不破坏地图中对它们的引用，请执行以下操作：

		1. 备份卡带！
		2.（可选）选择要更改的地图区域（默认为上半部分）
			// 按两次 ctrl-A 键以查看包括共享内存在内的整个地图。
		3. 选择要移动的精灵（仍在地图视图中），然后按 Ctrl-X
		4. 选择目标精灵（也在地图视图中），然后按 Ctrl-V


:: SFX 编辑器

	卡带中有 64 个 SFX（“音效”），用于声音和音乐。

	每个 SFX 有 32 个音符，每个音符具有：
		频率（C0..C5）
		乐器（0..7）
		音量（0..7）
		效果（0..7）

	每个 SFX 还具有以下属性：

		演奏速度（SPD）：演奏每个音符的“滴答声”的数量。
			// 这表示 1 最快，3 表示慢 3 倍，依此类推。

		循环开始和结束：这是要循环回并移至的音符索引
			// 当起始索引 >= 结束索引时，循环将关闭

	有 2 种用于编辑/查看 SFX 的模式：音高模式（更适合
	（用于声音效果）和音轨模式（更适合音乐）。
	模式可以使用左上方的按钮进行更改，也可以使用 TAB 进行切换。


	1. 音高模式

		在音高区域上单击并拖动以设置每个音符的频率，
		使用当前选择的仪器（以颜色表示）。

		按住 Shift 键仅应用所选乐器
		按住 CTRL 键将输入的音符捕捉到 C 小调五音阶


	2. 音轨模式

		每个音符显示：频率为八度乐器的音量效果
		要输入音符，请使用 q2w3er5t6y7ui zsxdcvgbhnjm（类似钢琴的布局）
		按住 Shift 输入音符以移调 -1 八度.. +1 八度
		为新音符提供选定的乐器/效果值
		要删除音符，请使用退格键或将音量设置为 0

		单击，然后按住 Shift 单击以选择可以复制的范围
		（CTRL-C）和粘贴（CTRL-V）

		导航：
			PAGEUP/DOWN 或 CTRL-UP/DOWN 跳过 4 个音符
			HOME/END 跳到第一或最后一个音符
			CTRL-LEFT/RIGHT 在列间跳转


3. 两种模式的控制

		- + 导航当前的 SFX
		< > 更改速度。
		空格键 播放/停止
		SHIFT-SPACE 从当前 SFX 组开始播放（8 个音符组）
		A 发布循环样品
		左键单击或右键单击以增加 / 减小 SPD 或 LOOP 值
			// 单击并按住 Shift 键以增加/减少 4
			// 或者，单击并向左 / 向右或向上 / 向下拖动
		按住 Shift 键并单击一个乐器，效果或音量可应用到所有音符。


:: 效果

		0 无
		1 滑动          // 滑动到下一个音符和音量
		2 颤音          // 在四分之一音调内快速改变音高
		3 drop         // 将频率迅速降低到非常低的值
		4 淡入          // 将音量从 0 升高
		5 淡出          // 将音量降低到 0
		6 快速琶音       // 以 4 的速度遍历 4 个音符的组
		7 慢速琶音       // 以 8 的速度遍历 4 个音符的组

		如果 SFX 速度 <= 8，琶音速度减半为 2、4


:: 音乐编辑器

	PICO-8 中的音乐由一系列“模式”控制。
	每个模式都是 4 个数字，指示将在该通道上播放哪个 SFX。


	:: 流程控制

		可以使用右上角的 3 个按钮控制播放流程。

		某个模式播放完毕后，将播放下一个模式，除非：

		- 没有剩余数据可播放（音乐停止）
		- 在该模式上设置了 STOP 命令（第三个按钮）
		- 设置了 LOOP BACK 命令（第二个按钮），在这种情况下音乐播放器会进行搜索
			带有 LOOP START 命令（第一个按钮）的模式，如果未找到，则为模式 0。

		当某个模式具有不同速度的 SFX 时，最左侧的非循环通道已播放完毕，模式才算结束播放。
		这可以用来设置不分为 32 的拍号，或两次拍鼓的拍子等。


	:: 在卡带之间或卡带内复制音乐

		要选择一系列模式：单击模式中的第一个模式导航器，
		然后按住 Shift 键并单击最后一个模式。
		所选图案可以使用 CTRL-C 和 CTRL-V 复制并粘贴。
		粘贴到另一个卡带中时，如果 SFX 每个模式指向的位置不存在，
		那么指向的位置也会被粘贴（可能使用不同的索引）


	:: SFX 乐器

		除了 8 种内置乐器外，还可以使用前 8 个 SFX 自定义乐器。
		使用乐器右侧的切换按钮选择一个索引，
		它将在乐器通道中显示为绿色而不是粉红色。

		播放 SFX 乐器音符时，实际上会触发该 SFX，但会改变
		音符的属性：

			相对于 C2 添加了音高
			音量倍增
			效果将应用在 SFX 乐器的效果之上

		例如，可以通过定义一种乐器来实现简单的颤音效果
		在 SFX 0 中迅速在音量 5 和 2 之间切换。
		当使用这种乐器演奏音符时，音量可以像往常一样（通过音量通道）进行更改
		（或使用淡入/淡出效果）。
		这样，SFX 乐器可用于控制音量，音高和纹理的详细变化的组合。

		SFX 乐器仅在音高变化或前一音符音量为零发生时才重新触发。
		这对于随时间变化较慢的乐器很有用。
		例如：逐渐消失的铃铛。要反转此行为，可在触发音符时使用效果 3
		（通常为“drop”）。所有其它效果值具有它们自己的含义（触发 SFX 乐器时）。


============================================================================================
	Lua 语法入门
============================================================================================

	PICO-8 程序使用 Lua 语法编写，但不使用标准 Lua 库。
	以下是基本 Lua 语法的简要介绍。

	有关更多详细信息，或要查找有关正确的 Lua 的信息，请访问 www.lua.org。

	:: 注释

		-- 使用这样的两个连字符来忽略所有内容，直到行尾
		--[[多行
		注释 ]]


	:: 类型和赋值

		Lua 中的类型是数字，字符串，布尔值和表：

		NUM = 12/100
		S = "THIS IS A STRING"
		B = FALSE
		T = {1,2,3}

		PICO-8 中的数字均为 16:16 定点。范围从 -32768.0 到 32767.99999

		可以使用带有可选小数部分的十六进制表示法：
			0x11        -- 17
			0x11.4000   -- 17.25

		以十进制表示的数字将四舍五入到最接近的定点值。看到
		32 位十六进制表示形式，请使用 PRINT(TOSTR(VAL,TRUE))：
		
			?TOSTR(-32768,TRUE)      -- 0x8000.0000 
			?TOSTR(32767.99999,TRUE) -- 0x7fff.ffff

		如果为零，则除以零的结果为 0x7fff.ffff；如果为负，则除以 -0x7fff.ffff。


	:: 条件

		IF NOT B THEN
			PRINT("B IS FALSE")
		ELSE
			PRINT("B IS NOT FALSE")
		END
	
		-- 使用 ELSEIF
	
		IF X == 0 THEN
			PRINT("X IS 0")
		ELSEIF X < 0 THEN
			PRINT("X IS NEGATIVE")
		ELSEIF X > 0 THEN
			PRINT("X IS POSITIVE")
		ELSE
			PRINT("THIS IS LINE IS NEVER REACHED")
		END
	
		IF (4 == 4) THEN PRINT("EQUAL") END
		IF (4 ~= 3) THEN PRINT("NOT EQUAL") END
		IF (4 <= 4) THEN PRINT("LESS THAN OR EQUAL") END
		IF (4 > 3) THEN PRINT("MORE THAN") END


	:: 循环

		FOR X=1,5 DO
			PRINT(X)
		END
		-- 打印 1,2,3,4,5

		X = 1
		WHILE(X <= 5) DO
			PRINT(X)
			X = X + 1
		END
	
		FOR X=1,10,3 DO PRINT(X) END   -- 1,4,7,10

		FOR X=5,1,-2 DO PRINT(X) END  -- 5,3,1
	

	:: 函数和局部变量

		Y=0 
		FUNCTION PLUSONE(X)
			LOCAL Y = X+1
			RETURN Y
		END
		PRINT(PLUSONE(2)) -- 3
		PRINT(Y)          -- 0


	:: 表

		在 Lua 中，表是键值对的集合，其中键和值类型都可以混在一起。
		通过使用整数对它们进行索引，可以将它们用作数组。

		A={} -- 创建一个空表
		A[1] = "BLAH"
		A[2] = 42
		A["FOO"] = {1,2,3}

		-- 数组默认使用基于 1 的索引

		A = {11,12,13,14}
		PRINT(A[2]) -- 12

		-- 打印表的大小：

		PRINT(#A)   -- 4

		-- 索引为字符串时可以使用点表示法

		PLAYER = {}
		PLAYER.X = 2 -- 等价于 PLAYER["X"]
		PLAYER.Y = 3

		-- 另请参阅以下 api 参考中的表部分。


	:: PICO-8 简写

		PICO-8 还允许几种非标准的，较短的方法来编写通用模式。

		1. IF THEN END 语句可以写成单行：

		IF (NOT B) I=1 J=2
		-- 等价于：IF NOT B THEN I=1 J=2 END
		-- 请注意，需要在简写条件周围加括号。


		2. 一元数学运算符

		如果整个语句在一行上，也可以使用一元数学运算符。

		a += 2  -- 等价于 a = a + 2
		a -= 2  -- 等价于 a = a - 2
		a *= 2  -- 等价于 a = a * 2
		a /= 2  -- 等价于 a = a / 2
		a %= 2  -- 等价于 a = a % 2


		3. != 运算符

		不是简写形式，但 pico-8 接受 != 代替 ~= 表示“不等于”

============================================================================================
	API
============================================================================================

	PICO-8 是基于 Lua 编程语言构建的，但不包括 Lua 标准库。
	取而代之的是，提供了一个小的 api 以符合 PICO-8 的最小设计和有限的屏幕空间。
	有关使用了大多数 api 函数的示例程序，请参见 /DEMOS/API.P8

	函数在这里写为：
	function_name 参数 [可选参数]

	从命令行调用的系统函数可以省略通常的括号和字符串引号：
	load blah.p8 --> load("blah.p8")


--------------------------------------------------------------------------------------------------------
	系统
--------------------------------------------------------------------------------------------------------


	load 文件名 [breadcrumb [param_str]]
	save 文件名

		加载或保存卡带

		从正在运行的卡带加载时，已加载的卡带将带着参数字符串 param_str 立即运行，
		然后插入一个菜单项并将其命名为“breadcrumb”，即可以使用户返回到正在加载的卡带。

		以“＃”开头后接 id 的文件名将被视为社区卡带：
		load("#1234") -- 下载[并运行]卡带编号 1234

		如果 ID 是卡带的父帖子，或未指定修订号，则获取最新版本。
		社区卡带可以从其他社区卡带或本地卡带加载，但不能来自于导出的卡带。


	folder

		打开主机操作系统中的 carts 文件夹。


	ls（dir）

		列出当前目录中的文件。从正在运行的程序中调用时，
		返回同一目录中的所有 .p8 和 .p8.png 文件列表。


	run

		从头程序运行
		可以从程序内部调用以重置程序。


	stop [消息]

		停止卡带并选择打印一条消息


	resume

		通过重新进入 mainloop，从现有程序状态继续（需要 _update/_draw）
		使用单个“.”从命令行前进单个帧。


	reboot

		重新启动机器
		对于启动一个新项目很有用

	info

		打印出有关卡带的一些信息：
		代码大小，Token，压缩后大小

		还显示：

			未保存的更改 使用 PICO-8 编辑后还未保存
			外部更改 通过使用单独的文本编辑器编辑


	flip

		将后台缓冲区翻转到屏幕上，然后等待下一帧（30fps）
		通常不需要这样做 -- _draw() 会为您调用它。

		如果您的程序在一帧出现之前未调用 flip，且回调 _draw() 未进行，
		则将后台缓冲区的当前内容复制到屏幕。


	printh str [文件名] [覆盖]

		打印一个字符串到主机操作系统的控制台进行调试。

		如果设置了文件名，则将该字符串附加到主机操作系统上的文件中
			//（在当前目录中 -- 使用 FOLDER 查看）
		将覆盖设置为 true 会导致该文件被覆盖而不是附加。

		使用文件名“@clip”写入主机的剪贴板。
			// 使用 stat(4)读取剪贴板，但剪贴板的内容仅
			// 在运行时按 CTRL-V 后可用（出于安全原因）。


	time / t

		返回自卡带运行以来经过的秒数。

		这不是实际时间，而是通过计算 _update 或_ update60 被调用的次数。
		从同一帧多次调用 time() 会返回同样的结果。


	stat x

		获取 x 的系统状态：

		0  内存使用率（0..2048）
		1  自上次翻转以来的 CPU 使用率（1.0 == 30fps 时 100％ CPU）
		4  剪贴板内容（在用户按下 CTRL-V 之后）
		6  参数字符串
		7  当前帧率

		16..19  当前在通道 0..3 上播放的 SFX 的索引
		20..23  通道 0..3 上的音符编号（0..31）
		24      当前正在播放的模式索引
		25      播放模式的总数
		26      当前模式播放的滴答声

		80..85  UTC 时间：年，月，日，小时，分钟，秒
		90..95  本地时间

		100     当前的 breadcrumb 标签，或者为 nil


	extcmd x

		特殊系统命令，其中 x 是字符串：

			"pause"       请求打开暂停菜单
			"reset"       请求购物车重置
			"go_back"     跟随当前的面包屑（如果有的话）
			"label"       设置卡带标签
			"screen"      保存屏幕截图
			"rec"         设置视频起点
			"video"       将 .gif 保存到桌面
			"audio_rec"   开始录制音频
			"audio_end"   将录制的音频保存到桌面
			"shutdown"    退出卡带（来自导出的二进制文件）


--------------------------------------------------------------------------------------------
	程序结构
--------------------------------------------------------------------------------------------

	如果用户定义了 3 种特殊函数，则在编程过程中会调用它们：

		_update()
			每次更新以 30fps 调用一次

		_draw()
			每个可见帧调用一次

		_init()
			程序启动时调用一次


	_draw() 通常以 30fps 的速度调用，但如果无法及时完成，PICO-8 将
	尝试以 15fps 的速度运行，并在每个可见帧调用两次 _update() 进行补偿。


	:: 以 60fps 的速度运行 PICO-8

		如果定义了 _update60() 而不是 _update()，PICO-8 将以 60fps 模式运行：

		- 以 60fps 的速度调用 _update60() 和 _draw()
		- 每帧可使用一半的 PICO-8 CPU，然后降至 30fps

		请注意，并非所有主机都能够以 60fps 的速度运行。旧机器
		和/或网络版本可能还会要求 PICO-8 以 30 fps（或 15 fps）的速度运行，即使
		当 PICO-8 CPU 没有过载时。在这种情况下，多个 _update60 调用
		对于每个 _draw 调用都以相同的方式进行。


--------------------------------------------------------------------------------------------
	#INCLUDE
--------------------------------------------------------------------------------------------

	可以在启动卡带时（但不能在运行时）将源代码注入程序中，
	使用“ #INCLUDE FILENAME”，其中 FILENAME 是纯文本文件（包含 Lua
	代码），另一个卡带中的一个标签或另一个卡带中的所有标签：

		#INCLUDE SOMECODE.LUA
		#INCLUDE ONETAB.P8:1
		#INCLUDE ALLTABS.P8

	当卡带运行时，每个包含的文件的内容都被视为
	粘贴到编辑器中代替该行。

		- 文件名是相对于当前卡带的（因此，需要先保存）
		- 包含不是递归执行的。
		- 依旧有字符数和令牌限制。

	当卡带另存为 .P8.PNG 或导出为二进制文件时，所有包含的文件都会
	注入并与卡带一起保存，因此没有外部依赖性。

	#INCLUDE 可用于类似以下的事情：

		- 在卡带之间共享代码（库或通用的多卡带代码）
		- 使用外部代码编辑器，而无需直接编辑 .p8 文件。
		- 将卡带视为加载 PICO-8 编辑工具进行修改的数据文件。
		- 加载和存储由外部（非 PICO-8）工具生成的数据。


--------------------------------------------------------------------------------------------
	图形
--------------------------------------------------------------------------------------------
  
	PICO-8 的固定容量为 128 个 8x8 精灵，加上另外 128 个与
	地图数据的下半部分（“共享数据”）。这 256 个精灵被统称为
	精灵表，可以将其视为 128x128 像素的图像。

	PICO-8 的所有绘制操作均受当前绘制状态的影响。绘制状态
	包括相机位置（用于向所有坐标添加偏移量），调色板映射
	（用于为精灵重新着色），裁剪矩形，绘图颜色和填充图案。

	每次运行程序时都会重置绘制状态。这等效于调用：
	clip() camera() pal() color()


	颜色编号：

	 0  黑色  1  暗蓝色  2  暗紫色  3  暗绿色
	 4  棕色  5  深灰色  6  浅灰色  7  白色
	 8  红色  9  橙色   10  黄色  11  绿色
	 12 蓝色 13  靛青   14  粉色  15  桃红色


	clip [x y w h]

		设置屏幕的裁剪区域（以像素为单位）
		clip() 重置


	pget x y
	pset x y [c]

		获取或设置 x，y 处像素的颜色（c）。


	sget x y
	sset x y [c]

		获取或设置精灵表像素的颜色（c）。


	fget n [f]
	fset n [f] v

		获取或设置精灵标志的值（v）
		f 是标志索引 0..7
		v 是布尔值，可以为 true 或 false

		标志 0..7 的初始状态可以在精灵编辑器中设置，
		使用那一行彩色小按钮。

		精灵标志的含义由用户决定，或者可以用来
		指出哪些组（“图层”）的精灵应通过地图绘制。

		如果省略标志索引，则将取回所有标志/设置为位字段
		fset(2, 1+2+8)   -- 设置位 0，1 和 3
		fset(2, 4, true) -- 设置第 4 位
		print(fget(2))   -- 27（1 + 2 + 8 + 16）


	print str [x y [col]]

		打印一个字符串
		如果仅提供 str，并且光标到达屏幕的末尾后，
		会自动应用回车和垂直滚动。


	cursor x y [col]

		设置光标位置和回车边距
		如果指定了 col，还会设置当前颜色。


	color [col]

		设置绘图功能要使用的当前颜色
		如果未指定 col，则当前颜色设置为 6

	cls [col]

		清除屏幕并重置裁剪矩形


	camera [x y]

		为所有绘图操作将屏幕偏移设置为-x，-y
		camera() 重置


	circ     x y r [col]
	circfill x y r [col]

		在半径为 r 的 x，y 处画一个圆或实心圆
		如果 r 为负，则不画圆


	line x0 y0 [x1 y1] [col]

		画线
		如果未给出 x1，y1，则使用最后绘制的线的末尾


	rect     x0 y0 x1 y1 [col]
	rectfill x0 y0 x1 y1 [col]

		画一个矩形或实心矩形


	pal c0 c1 [p]

		在随后的绘图调用中或在整个屏幕范围内，将调色板颜色 c0 交换为 c1。

		PICO-8 的绘制状态有两个调色板。p 指定要修改的那个，默认为 0：

			0 绘图调色板：颜色在绘图上重新映射 // 例如重新着色精灵
			1 屏幕调色板：重新映射显示的颜色   // 例如用于淡入淡出或全屏效果

		例如，在绘制精灵时将颜色 12（蓝色）替换为颜色 8（红色）：

			PAL(8,12)
			SPR(1,60,60)）

		PAL() 重置为系统默认值（包括透明度值和填充模式）


	pal tbl [p]

		当 pal 的第一个参数是表时，将为每个条目分配颜色。
		例如，要将颜色 12 和 14 重新映射为红色：

			PAL({[12]=9, [14]=8})

		或为整个屏幕阴影重新着色为灰色（包括已绘制的所有内容）：

			PAL({1,1,5,5,5,6,7,13,6,7,7,6,13,6,7}, 1)


	palt c [t]

		将颜色索引的透明度设置为 t（布尔值）
		透明度会影响 spr()，sspr()，map() 和 tline()

			PALT(8, TRUE) -- 在后续的 sprite/tline 绘制调用中未绘制红色像素

		palt() 重置为默认值：除颜色 0 外，所有颜色均为不透明

		当 c 是唯一的参数时，它将被视为用于设置所有 16 个值的位域。
		例如：将颜色 0 和 1 设置为透明：

			PALT(0b1100000000000000)


	spr n x y [w h] [flip_x] [flip_y]

		在位置 x，y 上绘制精灵 n（0..255）
		默认情况下，width 和 height 为 1，1，并指定要变灰的精灵数量。
		默认将颜色 0 绘制为透明（请参阅 palt()）
		flip_x = true 可水平翻转
		flip_y = true 可垂直翻转


	sspr sx sy sw sh dx dy [dw dh] [flip_x] [flip_y]

		从精灵表（sx，sy，sw，sh）拉伸矩形 // 以像素为单位
		并绘制矩形（dx，dy，dw，dh）
		默认将颜色 0 绘制为透明（请参阅 palt()）
		dw，dh 默认为 sw，sh
		flip_x = true 可水平翻转
		flip_y = true 可垂直翻转


	fillp p

		PICO-8 填充图案是 4x4 2 色平铺图案，可通过以下方式观察到：
			circ() circfill() rect() rectfill() pset() line()

		p 是从最高位开始读取的位域。
		计算所需的模式的 p 的值，只需将位值加在一起：

			.-----------------------.
			|32768|16384| 8192| 4096|
			|-----|-----|-----|-----|
			| 2048| 1024| 512 | 256 |
			|-----|-----|-----|-----|
			| 128 |  64 |  32 |  16 |
			|-----|-----|-----|-----|
			|  8  |  4  |  2  |  1  |
			'-----------------------'

		例如，FILLP(4+8+64+128+256+512+4096+8192) 将创建一个棋盘图案。

		这可以用二进制更整洁地表达：FILLP(0b0011001111001100)
		默认填充图案为 0，这表示绘制了单色。

		要为图案指定第二种颜色，请使用任何 color 参数的高位：

			FILLP(0b0011010101101000)
			CIRCFILL(64,64,20, 0x4E) -- 棕色和粉红色

		可以设置一个附加的位 0b0.1 来指示未绘制第二种颜色。

			FILLP(0b0011001111001100.1) -- 带有透明正方形的棋盘

		也可以通过在任何颜色参数中设置位来设置填充图案：

			POKE(0x5F34, 1) -- 设置集成的填充模式 + 颜色模式
			CIRCFILL(64,64,20, 0x114E.ABCD) -- 将填充模式设置为 ABCD

			-- bit  0x1000.0000 表示应观察到非彩色位
			-- bit  0x0100.0000 透明位
			-- bits 0x00FF.0000 是通常的颜色位
			-- bits 0x0000.FFFF 被解释为填充模式



	tline x0 y0 x1 y1 mx my [mdx mdy]

		从（x0，y0）到（x1，y1）绘制一条纹理线，从地图上读取颜色值。
		mx, my 是地图方块中的地图坐标。
		mdx，mdy 是绘制每个像素后添加到 mx，my 的增量。（默认为 1/8，0）


		地图坐标（mx，my）被以下地址的值掩盖
		// 它们的值必须是 2 的幂（8，16，32 ..）

		POKE(0x5F38, WIDTH)
		POKE(0x5F39, HEIGHT)


--------------------------------------------------------------------------------------------
	表
--------------------------------------------------------------------------------------------


	add t v

		将值 v 加到表 t 的末尾。
		等效于t[#t+1] = v

			FOO={}        -- 创建空表
			ADD(FOO, 11)
			ADD(FOO, 22)
			PRINT(FOO[2]) -- 22


	del t v

		删除表 t 中值 v 的第一个实例
		其余条目向左移一个索引，以避免出现漏洞。
		请注意，v 是要删除的项目的值，而不是表中的索引！
		可以在迭代表时安全地在表的项目上调用 del()。

			A={1,10,2,11,3,12}
			FOR ITEM IN ALL(A) DO
				IF (ITEM < 10) THEN DEL(A, ITEM) END
			END
			FOREACH(A, PRINT) -- 10,11,12
			PRINT(A[3])       -- 12


	all t

		在 FOR 循环中使用，以遍历表中的所有项（具有从 1 开始的整数索引），
		按照被添加的顺序。

			T = {11,12,13};
			ADD(T,14)
			ADD(T,"HI")
			FOR V IN ALL(T) DO PRINT(V) END -- 11 12 13 14 HI
			PRINT(#T) -- 5


	foreach t f

		对于表 t 中的每个项目，以该项目作为单个参数调用函数 f。

			FOREACH(T, PRINT)


	pairs t

		在 FOR 循环中使用，以遍历表 t，为每个项目提供键和值。
		与 all() 不同，pairs() 遍历每个项目，而不管索引方案如何。
		不能保证顺序。

			T = {["HELLO"]=3, [10]="BLAH"}
			T.BLUE = 5;
			FOR K,V IN PAIRS(T) DO
				PRINT("K: "..K.."  V:"..V)
			END

		输出：
		
			K: 10  v:BLAH
			K: HELLO  v:3
			K: BLUE  v:5


--------------------------------------------------------------------------------------------
	输入值
--------------------------------------------------------------------------------------------

	btn [i] [p]

		获取玩家 p 按钮 i 的状态（默认为 0）
		i：0..5：左右上下ox
		p：玩家索引 0..7

		除了使用数字代替 i 外，还可以使用按钮字形。
		（在编码编辑器中，使用 Shift-L R U D O X）

		如果未提供任何参数，则返回玩家 0 和 1 的所有 12 个按钮状态的位域
			// P0: bits 0..5  P1: bits 8..13

		默认键盘到玩家按钮的映射：

			玩家 0：[DPAD]：方向键，[O]：Z C N [X]：X V M
			玩家 1：[DPAD]：SFED，[O]：LSHIFT [X]：TAB W Q A

		** 卡带作者注意：
			当使用实体游戏手柄，某些按钮组合可能很尴尬
			（UP 来跳跃/加速，而不是 [X] 或 [O]），甚至是不可能的（LEFT + RIGHT）


	btnp [i [p]]

		btnp 是“Button Pressed”的缩写；按下按钮时，它返回 true，
		当按钮按下并且未在最后一帧按下时，btnp 返回 true。它也会
		在 15 帧之后重复，然后每 4 帧返回 true（以 30fps 的速度
		两倍于 60fps）。可以用于菜单导航或网格玩家移动。

		可以通过以下存储器地址来设置自定义延迟（30fps）：

		POKE(0x5F5C, DELAY) -- 设置重复之前的初始延迟，255 表示永不重复。
		POKE(0x5F5D, DELAY) -- 设置重复延迟

		在两种情况下，都可以将 0 用作默认行为（延迟 15 和 4）


--------------------------------------------------------------------------------------------
	音频
--------------------------------------------------------------------------------------------

	sfx n [通道[偏移[长度]]]

		在通道（0..3）上从音符偏移量（0..31）开始播放指定长度的 sfx n 音符
		n -1 以停止该通道上的声音
		n -2 使该声道上的声音不再循环播放
		频道上播放的任何音乐都将暂停
		偏移量为音符数量（0..31）

		channel -1 （默认）以自动选择未使用的频道
		channel -2 停止声音在任何频道上播放


	music [n [fade_len [channel_mask]]]

		从模式 n（0..63）开始播放音乐
		n -1 停止音乐
		fade_len 以毫秒为单位（默认值：0）
		channel_mask 指定仅保留音乐的频道
		例如在通道 0..2 上播放：1 + 2 + 4 = 7

		保留的通道仍可用于播放声音效果，但仅当
		sfx() 显式请求频道索引。


--------------------------------------------------------------------------------------------------------
	地图
--------------------------------------------------------------------------------------------------------

	PICO-8 地图是 8 位 cel 的 128x32 网格，或使用共享内存时为 128x64。
	当使用地图编辑器，将每个单元的含义视为精灵表中的索引0..255）。
	但是，它可以用作常规数据块。


	mget x y
	mset x y v

		在 x，y 处获取或设置地图值（v）


	map cel_x cel_y sx sy cel_w cel_h [layer]

		在屏幕位置 sx，sy（像素）处绘制地图部分（以 cel 为单位）
		如果指定了图层，则仅绘制具有相同标志号集的 cel
			// 位域。因此，0x5 表示绘制设置位为 0 和 2 的精灵。
			// 默认为所有精灵

		例外：sprite 0 始终表示为空。

		例如 map(0,0, 20,20, 4,2)
		-> 在地图上从 0，0 开始绘制 4x2 cel 块，到屏幕 20，20

		如果未指定 cel_w 和 cel_h，则默认为 128，32
		（地图的上半部分 -- 使用 128，64 表示整个地图，包括共享内存）


--------------------------------------------------------------------------------------------------------
	内存
--------------------------------------------------------------------------------------------------------

	PICO-8 具有 3 种类型的内存：

		1. 基本 RAM（32k）：请参见下面的布局。用 peek() poke() memcpy() memset() 访问
		2. 卡带 ROM（32k）：与基本 RAM 相同的布局，直到 0x4300
		3. Lua RAM（2MB）：编译程序 + 变量

		技术说明：// 您可能不需要了解这一点

			使用编辑器时，要修改的数据在卡带 rom 中，但是 api 函数如 spr()
			和 sfx() 则在基本 ram 上操作。PICO-8 自动将卡带 ROM 复制到基本 RAM（即
			在 3 种情况下调用 reload()）：

			1. 装入卡带时
			2. 运行卡带时
			3. 退出任何编辑器模式时 // 可使用以下命令关闭：poke(0x5ffe,1)



	:: 基本 RAM 内存布局

		0x0    gfx
		0x1000 gfx2/map2（共享）
		0x2000 地图
		0x3000 gfx 标志
		0x3100 歌曲
		0x3200 sfx
		0x4300 用户数据
		0x5e00 持久卡带数据（256 字节）
		0x5f00 绘制状态
		0x5f40 硬件状态
		0x5f80 gpio 引脚（128 字节）
		0x6000 屏幕（8k）

		用户数据没有特殊含义，可以通过 memcpy()，peek() 和 poke() 来任意使用。
		持久卡带数据映射到 0x5e00..0x5eff，但仅在调用 cartdata() 时存储。
		彩色格式（gfx/屏幕）是每字节 2 个像素：低位编码为每对的左像素。
		地图格式是每 cel 一个字节，其中每个字节通常编码一个精灵索引。


	peek addr
	poke addr val

		读写一个字节到基本内存中的地址。
		合法地址为 0x0..0x7fff
		读取超出范围将返回 0
		超出范围会导致故障


	peek2 addr
	poke2 addr val
	peek4 addr
	poke4 addr val

		16 位和 32 位版本。以小端格式读写一个数字（val）：
			16 位： 0xffff.0000
			32 位： 0xffff.ffff

		addr 不需要与 2 或 4 字节边界对齐。


memcpy dest_addr source_addr len

将len字节的基本ram从源复制到dest
部分可以重叠


重新加载dest_addr source_addr len [文件名]

与memcpy相同，但从购物车rom复制
代码段（> = 0x4300）受保护，无法读取。
如果指定了文件名，请从其他盒式磁带加载数据。
//（必须是本地的-无法以这种方式读取bbs磁带）


cstore dest_addr source_addr len [文件名]

与memcpy相同，但从基本ram复制到购物车rom
cstore（）等效于cstore（0，0，0x4300）
可用于编写工具来构建购物车或可视化状态
使用地图编辑器/ gfx编辑器绘制地图/ spritesheet。
代码段（> = 0x4300）受保护，无法写入。

如果指定了文件名，则将数据直接写入该文件名
磁盘上的盒带。一次最多可以写入64个盒带。
有关使用cstore的其他说明，请参见“墨盒数据”部分。


memset dest_addr val len

将len字节设置为val
（非常快-可以用来绘制未修剪的水平扫描线等）


-------------------------------------------------- -------------------------------------------------- ----
数学
-------------------------------------------------- -------------------------------------------------- ----

最大x y
最小x
中间x y z

返回参数的最大值，最小值或中间值
例如，mid（7,5,10）返回7


flr x
ceil x

返回等于或小于x或大于x的最接近的整数

？flr（4.1）-> 4
ceil（4.1）-> 5
？flr（-2.3）-> -3
ceil（-2.3）-> -2


cos x
罪恶x

返回x的余弦值，其中1.0表示整转
罪恶被反转以适应屏幕空间
例如sin（0.25）返回-1

如果您希望不使用y反演的基于弧度的触发函数，
将以下代码段粘贴到程序的开始位置附近：

cos1 = cos函数cos（angle）返回cos1（angle /（3.1415 * 2））结束
sin1 = sin函数sin（angle）return -sin1（angle /（3.1415 * 2））end


atan2 dx dy

将dx，dy转换为0..1的角度
与cos / sin一样，角度也要在屏幕空间中逆时针旋转
例如atan（1，-1）返回0.125


平方x

返回x的平方根


腹肌x

返回x的绝对（正）值


rnd x
返回一个随机数n，其中0 <= n <x
如果需要整数，请使用flr（rnd（x））


srand x
设置随机数种子
种子会在购物车启动时自动随机分组


按位运算

按位运算与逻辑表达式相似，不同之处在于它们在位级别工作。

假设您有两个数字（此处使用“ 0b”前缀以二进制形式编写）：

X = 0b1010
Y = 0b0110

当X /和/ Y中的相应位都置位时，按位与将给您设置位

PRINT（BAND（X，Y））-结果：0b0010（十进制2）

PICO-8提供9种按位函数：

band x y-两位都置位
bor x y-任一位置1
bxor x y-任一位置1，但不是两个都置1
bnot x-未设置每个位
shl x n-向左移n位（零从右边进来）
shr x n-算术右移（最左位状态重复）
lshr x n-逻辑右移（左数为零）
rotl x n-将x中的所有位左移n位
rotr x n-将x中的所有位向右旋转n个位

运营商版本也可用于前7个： ^^〜<< >> >>>

例如：PRINT（67＆63）-结果：3等于BAND（67,63）

运算符比其相应功能要快一些。他们的行为完全一样
除了如果任何操作数不是数字，结果是运行时错误（函数版本
而是默认为0）。


整数部

整数除法可以使用\
print（9 \ 2）-结果：4相当于flr（7/2）


-------------------------------------------------- -------------------------------------------------- ----
自定义菜单项
-------------------------------------------------- -------------------------------------------------- ----

menuitem索引[标签回调]

向暂停菜单添加一个额外的项目

索引应为1..5，并确定每个菜单项的显示顺序
标签应为长度不超过16个字符的字符串
回调是当用户选择项目时调用的函数

如果没有标签或功能，菜单项将被删除

例：
menuitem（1，“重新开始拼图”，function（）reset_puzzle（）sfx（10）结束）


-------------------------------------------------- -------------------------------------------------- ----
弦乐
-------------------------------------------------- -------------------------------------------------- ----

s =“褐狐狸”


 -  长度

打印（#s）-> 19


-连接字符串

print（“ three” ..4）->“ three 4”


-sub（）获取子字符串

print（sub（s，5,9））->“快速”
print（sub（s，5））->“快棕色狐狸”


-转换

tostr（17）-返回“ 17”
tostr（17，true）-返回“ 0x0011.0000”
tonum（“ 17”）-返回17
chr（64）-返回“ @”
ord（“ @”）-返回64
ord（“ 123”，2）-返回50（第二个字符：“ 2”）


-------------------------------------------------- -------------------------------------------------- ----
种类
-------------------------------------------------- -------------------------------------------------- ----

val类型

以字符串形式返回值x的类型的名称

tostr val [hex]

以字符串形式返回val

如果hex为true并且val为数字，则无符号十六进制写为
该数字以“ 0x0000.0000”格式返回。您可以使用它来
检查PICO-8数字的内部表示。

如果val是布尔值，则将其写为“ true”或“ false”

所有其他val类型均写为“ [typename]”（使用十六进制包括十六进制）
字符串中的标识（如果有）

托纳瓦尔

将val转换为数字
如果val是字符串，则数字以小数表示，除非前缀为“ 0x”
如果转换失败，则tonum不返回任何值。


-------------------------------------------------- ------------------------------------------
墨盒数据
-------------------------------------------------- ------------------------------------------

使用cartdata（），dset（）和dget（），可以获得64个数字（256个字节）的持久数据
可以存储在用户的PICO-8上，该PICO-8在卸载购物车后仍然存在，或者
PICO-8关闭。这可以用作存储诸如
高分或保存玩家进度。它也可以用来共享数据
墨盒/墨盒版本。

如果您需要256个以上的字节，也可以直接写入
使用cstore（）的墨盒。缺点是数据与
墨盒的特定版本。例如如果游戏进行了更新，玩家将
失去他们的储蓄游戏。另外，盒带数据部分中的一些空间
需要保持可用状态。

另一种选择是通过指定直接写入第二个盒带
cstore（）的第四个参数。这需要更换购物车（实际上
仅表示用户需要观看购物车动画1秒钟）。

CSTORE（0,0,0x2000，“ spritesheet.p8”）
-以后：
RELOAD（0,0,0x2000，“ spritesheet.p8”）-恢复保存的数据


cartdata ID

cartdata（）打开一个由id索引的永久数据存储插槽，可以是
用于使用以下命令存储和检索多达256个字节（64个数字）的数据
DSET（）和DGET（）。

CARTDATA（“ zep_dark_forest”）-每个会话只能设置一次
-在程序的后面。
DSET（0，得分）

id是长度不超过64个字符的字符串，应足够特殊以至于
其他墨盒不会意外使用相同的ID。

例如cartdata（“ zep_jelpi”）

合法字符为a..z，0..9和下划线（_）

如果已加载数据，则返回true，否则返回false

每个盒带执行一次不能多次调用cartdata。

设置好cartdata ID后，将映射内存0x5e00..0x5eff的区域
到永久存储，可以直接访问，也可以通过dget / dset访问。


dget索引

获取存储在索引（0..63）上的数字
仅在调用cartdata（）之后使用此方法

dset索引值

设置存储在索引（0..63）的数字
仅在调用cartdata（）之后使用此方法

无需刷新写入的数据-它是自动的
即使直接将POKE（）也保存到永久存储中。


-------------------------------------------------- ------------------------------------------
通用输入输出
-------------------------------------------------- ------------------------------------------

GPIO代表“通用输入输出”，并允许机器与
彼此。 PICO-8将范围为0x5f80..0x5fff的字节映射到可以为
POKE（）ed（以输出值-例如使LED点亮）或PEEK（）ed（例如以读取
开关的状态）。

GPIO对于不同的主机平台意味着不同的含义：

芯片：0x5f80..0x5f87映射到xio-p0..xio-p7
Pocket CHIP：0x5f82..0x5f87映射到GPIO1..GPIO6
// xio-p0和p1暴露在外壳内的原型区域内。
Raspberry Pi：0x5f80..0x5f9f映射到接线Pi引脚0..31
//有关不同模型的映射，请参见http://wiringpi.com/pins/。
//还：注意BCM与WiringPi GPIO索引！

CHIP和Raspberry Pi值均为数字值：0（低）和255（高）

一个简单的程序，用于使打开或关闭的所有LED闪烁：

t = 0
函数_draw（）
cls（5）
对于我= 0,7
值= 0
如果（t％2 <1）val = 255
戳（0x5f80 + i，val）
circfill（20 + i * 12,64,4，val / 11）
结束
t + = 0.1
结束


::序列号

为了更精确地计时，可以使用SERIAL（）命令。 GPIO写入被缓冲和
在每个帧的末尾调度，以更高和/或更规则的频率循环时钟
速度比使用POKE（）调用手动位敲打要快。

序列号（通道，地址，长度）

渠道：
0x000..0x0fe对应于gpio引脚号；发送0x00为低电平或0xFF为高电平
0x0ff延迟；长度是指“持续时间”，以微秒为单位（不包括开销）
0x100..0x101在通道0,1上进行SPI读/写（实验）
0x400..0x401 ws281x LED灯串（实验性）

地址：要读取的PICO-8存储器位置（如果是SPI，则随后写入）
length：要发送的字节数。允许1/8分之一发送部分位字符串。

例如，一次向一个典型的APA102 LED字符串发送一个字节：

VAL = 42-要发送的值
DAT = 16 CLK = 15-数据和时钟引脚取决于设备
POKE（0x4300,0）-要发送的数据（单字节：0或0xff）
戳（0x4301,0xFF）
对于B = 0,7 DO
-发送位（高位先发）
串行（DAT，BAND（VAL，SHL（1,7-B））> 0 AND 0x4301或0x4300，1）
-循环时钟
串行（CLK，0x4301）
SERIAL（0xFF，5）-延迟5
串行（CLK，0x4300）
SERIAL（0xFF，5）-延迟5
结束

:: HTML

导出为HTML / .js的墨盒会使用全局整数数组（pico8_gpio）
代表gpio引脚。外壳HTML应该定义数组：

var pico8_gpio = Array（128）;

-------------------------------------------------- ------------------------------------------
鼠标和键盘输入
-------------------------------------------------- ------------------------------------------

//（实验性的！HTML实施仍然受到限制和错误）

可以通过启用devkit输入模式来实现鼠标和键盘输入：

戳（0x5F2D，1）

请注意，并非每个PICO-8都会连接键盘或鼠标，因此发布时
车到Lexaloffle BBS，鼓励进行键盘和/或鼠标控制
可选，默认情况下默认关闭。启用devkit输入模式后，将显示一条消息
向BBS用户显示，警告他们程序可能期望输入超出
标准的6键控制器。

鼠标和键盘的状态可以在stat（x）中找到：

STAT（30）-（布尔值）当有按键可用时为真
STAT（31）-键盘返回的（字符串）字符
STAT（32）-鼠标X
STAT（33）-鼠标Y
STAT（34）-鼠标按钮（位域）
STAT（36）-鼠标滚轮事件


-------------------------------------------------- ------------------------------------------
Lua的其他功能
-------------------------------------------------- ------------------------------------------

PICO-8还为高级用户提供了Lua的2个功能：Metatables和Coroutines。

有关更多信息，请参见Lua 5.2手册。

::元表

元表可用于定义特定操作下对象的行为。
例如，要使用表格表示可以加在一起的2D矢量，
通过为元表定义“ __add”函数来重新定义“ +”运算符：

vec2d = {
__add = function（a，b）
返回{x =（a.x + b.x），y =（a.y + b.y）}
结束
}

v1 = {x = 2，y = 9}可设置（v1，vec2d）
v2 = {x = 1，y = 5}可设置（v2，vec2d）
v3 = v1 + v2
print（v3.x ..“，” .. v3.y）-3,14


可设定t，m

将表t metatable设置为m


可获取的

返回表t的当前元表；如果未设置，则返回nil


原始t键值
原始密钥
原始等式t1 t2
罗文

对表的原始访问，就好像没有定义任何元方法一样


::协程

协程提供了一种在并发状态下运行程序不同部分的方法
方式，类似于线程。函数可以称为协程，以
yield（）任意次，然后在相同点再次恢复。

函数hey（）
打印（“做某事”）
让（）
打印（“做下一件事”）
让（）
打印（“完成”）
结束

c =共同创建（嘿）
对于i = 1,3做coresume（c）结束


共同创建

为函数f创建一个协程。


核心c [p0 p1 ..]

运行或继续协程c。参数p0，p1 ..被传递给
协程的功能。

如果协程完成没有任何错误，则返回true
返回false，如果有错误，则返回error_message。

**协程内部发生的运行时错误不会导致程序
停止运行。将coresume（）包装在assert（）中是一个好主意。
如果断言失败，它将打印由生成的错误消息
核心

断言（coresume（c））


肋骨

以字符串形式返回协程c的状态：
“跑步”
“已暂停”
“死”

让

暂停执行并返回到调用方。